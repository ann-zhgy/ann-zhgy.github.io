<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ann-zhgy</title>
  
  <subtitle>blog 学习笔记</subtitle>
  <link href="http://ann-zhgy.github.io/atom.xml" rel="self"/>
  
  <link href="http://ann-zhgy.github.io/"/>
  <updated>2023-11-15T06:22:06.592Z</updated>
  <id>http://ann-zhgy.github.io/</id>
  
  <author>
    <name>ann-zhgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一致哈希算法</title>
    <link href="http://ann-zhgy.github.io/2023/10/792acd6.html"/>
    <id>http://ann-zhgy.github.io/2023/10/792acd6.html</id>
    <published>2023-10-12T05:00:17.000Z</published>
    <updated>2023-11-15T06:22:06.592Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>场景：数据分区存储</p></blockquote><span id="more"></span><h1 id="哈希算法">哈希算法</h1><p>通过哈希算法，每个 key 都可以寻址到对应的服务器，比如，查询 key 是key-01，计算公式为 hash (key-01) %3，经过计算寻址到了编号为 1 的服务器节点 A</p><p>但如果服务器数量发生变化，基于新的服务器数量来执行哈希算法的时候，就会出现路由寻址失败的情况，Proxy 无法找到之前寻址到的那个服务器节点，这是为什么呢？</p><p>想象一下，假如 3 个节点不能满足业务需要了，这时我们增加了一个节点，节点的数量从 3 变化为 4，那么之前的 hash (key-01)% 3 = 1，就变成了 hash (key-01) % 4 =X，因为取模运算发生了变化，所以这个 X 大概率不是 1（可能 X 为 2），这时你再查询，就会找不到数据了，因为 key-01 对应的数据，存储在节点 A 上，而不是节点 B</p><p>同样的道理，如果我们需要下线 1 个服务器节点（也就是缩容），也会存在类似的可能查询不到数据的问题。</p><p>使用哈希算法选址时，如果数据节点的数量变化了，就必须对所有已经有的数据进行rehash，使数据可以按照规则分布在各个节点上，但是在生产中，数据迁移的成本是很高的</p><h1 id="一致性哈希算法寻址">一致性哈希算法寻址</h1><p>一致哈希算法也用了取模运算，但与哈希算法不同的是，哈希算法是对节点的数量进行取模运算，而一致哈希算法是对2^32进行取模运算。你可以想象下，一致哈希算法，将整个哈希值空间组织成一个虚拟的圆环，各个节点映射在圆环的不同位置</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20231012143647" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20231012143647.png" style="width: 100%;"></p></div><p>当需要对指定 key 的值进行读写的时候，你可以通过下面 2 步进行寻址：</p><ul><li>将 key 作为参数执行 c-hash () 计算哈希值，并确定此 key 在环上的位置；</li><li>从这个位置沿着哈希环顺时针 “行走”，遇到的第一节点就是 key 对应的节点。</li></ul><p>当我们新添加了一个节点 4，放在了节点 2 和节点 3 中间，那么我们仅需要平衡节点 3 的数据即可，即：仅需要对节点 3 的数据进行迁移</p><p>所以：使用了一致哈希算法后，扩容或缩容的时候，都只需要重定位环空间中的一小部分数据。<strong>也就是说，一致哈希算法具有较好的容错性和可扩展性。</strong></p><h1 id="虚拟节点">虚拟节点</h1><p>一致性哈希算法并不会保证节点均匀的分布在哈希环上，所以可能会带来一个问题：客户端访问请求集中在少数的节点上，出现了有些机器高负载，有些机器低负载现象。</p><p>如果想要节点在哈希环上分布的均匀，就需要有足够多的节点，节点越多，在哈希环上分布的越均匀，但是实际上我们并不会有那么多的节点，所以就引入了<strong>虚拟节点</strong>。</p><p>具体做法是：<strong>不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系</strong>。</p><p>比如对每个节点分别设置 3 个虚拟节点：</p><ul><li>对节点 A 加上编号来作为虚拟节点：A-01、A-02、A-03</li><li> 对节点 B 加上编号来作为虚拟节点：B-01、B-02、B-03</li><li> 对节点 C 加上编号来作为虚拟节点：C-01、C-02、C-03</li></ul><p>引入虚拟节点后，原本哈希环上只有 3 个节点的情况，就会变成有 9个虚拟节点映射到哈希环上，哈希环上的节点数量多了 3 倍。</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20231012150947" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20231012150947.png" style="width: 100%;"></p></div><p>当节点的数量多了之后，哈希环将不得不分布的更加均匀。这时候，如果有访问请求寻址到「A-01」这个虚拟节点，接着再通过「A-01」虚拟节点找到真实节点A，这样请求就能访问到真实节点 A 了。</p><p>上面为了方便你理解，每个真实节点仅包含 3个虚拟节点，这样能起到的均衡效果其实很有限。而在实际的工程中，虚拟节点的数量会大很多，比如Nginx 的一致性哈希算法，每个权重为 1 的真实节点就含有 160个虚拟节点。</p><p>另外，虚拟节点除了会提高节点的均衡度，还会提高系统的稳定性。<strong>当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高</strong>。</p><p>比如，当某个节点被移除时，对应该节点的多个虚拟节点均会移除，而这些虚拟节点按顺时针方向的下一个虚拟节点，可能会对应不同的真实节点，即这些不同的真实节点共同分担了节点变化导致的压力。</p><p>而且，有了虚拟节点后，还可以为硬件配置更好的节点增加权重，比如对权重更高的节点增加更多的虚拟机节点即可。</p><p>因此，<strong>带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;场景：数据分区存储&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分布式算法" scheme="http://ann-zhgy.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Raft" scheme="http://ann-zhgy.github.io/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>分布式算法 ——05-Raft 算法 - 分布式算法学习路径</title>
    <link href="http://ann-zhgy.github.io/2023/10/a4140eb6.html"/>
    <id>http://ann-zhgy.github.io/2023/10/a4140eb6.html</id>
    <published>2023-10-10T07:13:30.000Z</published>
    <updated>2023-11-15T06:22:06.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Raft 算法是现在分布式系统开发首选的共识算法。</strong>比如：etcd、consul。<strong>从本质上说，Raft 算法是通过一切以领导者为准的方式，实现一系列值的共识和各节点日志的一致。</strong></p></blockquote><span id="more"></span><h1 id="简介">简介</h1><p>不同于 Paxos 算法直接从分布式一致性问题出发推导出来，Raft 算法则是从多副本状态机的角度提出，用于管理多副本状态机的日志复制。Raft 实现了和 Paxos 相同的功能，它将一致性分解为多个子问题:<strong>Leader 选举 (Leader election)</strong>、<strong>日志同步 (Logreplication)</strong>、<strong>安全性 (Safety)</strong>、<strong>日志压缩 (Logcompaction)</strong>、<strong>成员变更 (Membershipchange)</strong> 等。同时，Raft 算法使用了更强的假设来减少了需要考虑的状态，使之变的易于理解和实现。</p><h2 id="角色">角色</h2><p>Raft 将系统中的角色分为<code>领导者(Leader)</code>、<code>跟从者(Follower)</code> 和<code>候选人(Candidate)</code>:</p><ul><li><code>Leader</code>: 接受客户端请求，并向 Follower同步请求日志，当日志同步到大多数节点上后告诉 Follower 提交日志。</li><li><code>Follower</code>: 接受并持久化 Leader 同步的日志，在 Leader告之日志可以提交之后，提交日志。</li><li><code>Candidate</code>: Leader 选举过程中的临时角色，由 Follower转换而来，发起投票参与竞选 Leader</li></ul><p>Raft 是强领导者模型，任何时刻都只能有一个领导者，剩下的都是Follower。Followwer 是被动的，它们不会发送任何请求，只是响应来自 Leader和 Candidate 的请求</p><h2 id="角色状态转换">角色状态转换</h2><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20231010160738" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20231010160738.png" style="width: 100%;"></p></div><p>Follower 只响应其他服务器的请求。如果 Follower 超时没有收到 Leader 的消息，它会成为一个 Candidate 并且开始一次 Leader 选举。收到大多数服务器投票的 Candidate 会成为新的 Leader。Leader 在宕机之前会一直保持 Leader 的状态。</p><h2 id="任期">任期</h2><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20231010160712" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20231010160712.png" style="width: 100%;"></p></div><p>Raft 算法将时间分为一个个的任期 (term)，每一个 term 的开始都是 Leader 选举。在成功选举 Leader 之后，Leader 会在整个 term 内管理整个集群。如果 Leader 选举失败，该 term 就会因为没有 Leader 而结束。</p><p>Raft 算法保证一个任期内最多只有一个 Leader</p><h2 id="日志">日志</h2><ul><li><code>entry</code>：每一个事件成为 entry，只有 Leader 可以创建entry。entry 的内容为 <code>&lt;term,index,cmd&gt;</code>，其中 cmd是可以应用到状态机的操作。</li><li><code>log</code>：由 entry 构成的数组，每一个 entry都有一个表明自己在 log 中的 index。只有 Leader 才可以改变其他节点的log。entry 总是先被 Leader 添加到自己的 log数组中，然后再发起共识请求，获得同意后才会被 Leader提交给状态机。Follower 只能从 Leader 获取新日志和当前的commitIndex，然后把对应的 entry 应用到自己的状态机中。</li></ul><h2 id="raft-和-multi-paxos-的异同">Raft 和 Multi Paxos 的异同</h2><h3 id="相似概念">相似概念</h3><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20231010162523" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20231010162523.png" style="width: 100%;"></p></div><h3 id="不同概念">不同概念</h3><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20231010162559" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20231010162559.png" style="width: 100%;"></p></div><h1 id="leader-选举">Leader 选举</h1><p>Raft 使用心跳 (heartbeat) 来触发 Leader 选举。当服务器启动时，初始化为Follower。Leader 向所有 Followers 周期性发送 heartbeat。如果 Follower在选举超时时间内没有收到 Leader 的heartbeat，就会等待一段随机的时间后发起一次 Leader 选举。</p><p>Follower 将当前 term 加一然后转换为Candidate。它首先给自己投票并且给集群中的其他服务器发送 RequestVoteRPC。结果有以下几种情况：</p><ul><li>赢得多数选票，成功选举为 Leader</li><li> 收到了 Leader 的消息，表示有其他节点成为 Leader</li><li> 没有收到服务器赢得多数的选票，Leader选举失败，等待选举时间超时并进入下一轮选举</li></ul><p>选举出 Leader 后，Leader 通过定期向所有 Followers发送心跳信息维持其统治。若 Follower 一段时间未收到 Leader 的心跳则认为Leader 可能已经挂了，再次发起 Leader 选举过程。</p><h1 id="日志同步">日志同步</h1><p>Leader 选出后，就开始接收客户端的请求。</p><p>Leader 收到客户端请求后，会生成一个 entry，包含<code>&lt;index,term,cmd&gt;</code>，在将这个 entry添加到自己的日志末尾后，向所有的节点广播该 entry，要求其他服务器复制这条entry。如果 Follower 接受该 entry，则会将 entry添加到自己的日志后面，同时返回给 Leader 同意。如果 Leader收到了多数的成功响应，Leader 会将这个 entry应用到自己的状态机中，之后可以称为这个 entry 是 committed的，并且向客户端返回执行结果。</p><p>Raft 保证以下两个性质：</p><ul><li>在两个日志里，有两个 entry 拥有相同的 index 和term，那么他们一定拥有相同的 cmd</li><li> 在两个日志里，有两个 entry 拥有相同的 index 和 term，那么他们前面的entry 也一定相同</li></ul><p>通过 “仅有 Leader 可以生成entry” 来保证第一个性质，第二个性质需要一致性检查来进行保证。</p><p>一般情况下，Leader 和 Follower 的日志保持一致，Leader的崩溃会导致日志不一样，这样一致性检查会产生失败。Leader 通过强制Follower 复制自己的日志来处理日志的不一致。</p><p>这就意味着，在 Follower 上的冲突日志会被领导者的日志覆盖。为了使得Follower 的日志和自己的日志一致，Leader 需要找到 Follower与它日志一致的地方，然后删除 Follower在该位置之后的日志，接着把这之后的日志发送给 Follower。</p><p><code>Leader</code> 给每一个 <code>Follower</code> 维护了一个<code>nextIndex</code>，它表示 <code>Leader</code>将要发送给该追随者的下一条日志条目的索引。当一个 <code>Leader</code>开始掌权时，它会将 <code>nextIndex</code>初始化为它的最新的日志条目索引数 + 1。如果一个 <code>Follower</code>的日志和 <code>Leader</code> 的不一致，<code>AppendEntries</code>一致性检查会在下一次 <code>AppendEntries RPC</code>时返回失败。在失败之后，<code>Leader</code> 会将 <code>nextIndex</code>递减然后重试 <code>AppendEntries RPC</code>。最终 <code>nextIndex</code>会达到一个 <code>Leader</code> 和 <code>Follower</code>日志一致的地方。这时，<code>AppendEntries</code>会返回成功，<code>Follower</code>中冲突的日志条目都被移除了，并且添加所缺少的上了 <code>Leader</code>的日志条目。一旦 <code>AppendEntries</code>返回成功，<code>Follower</code> 和 <code>Leader</code>的日志就一致了，这样的状态会保持到该任期结束。</p><h1 id="日志压缩">日志压缩</h1><p>在实际的系统中，不能让日志无限增长，否则系统重启会消耗很长的时间进行回放，从而影响可用性。Raft采用对整个系统进行 snapshot 来解决，snapshot 之前的日志都可以丢弃</p><p>每个副本独立的对自己的系统状态进行snapshot，并且对已经提交的日志记录进行 snapshot</p><p>Snapshot 包含以下内容：</p><ul><li>日志元数据：最后一条已经提交的 log entry 的 log index 和term。这两个值在 snapshot 的第一条 log entry 的 AppendEntries RPC的完整性检查的时候会被用上。</li><li>系统当前状态</li></ul><p>当 Leader 要发给某个日志落后太多的 Follower 的 logentry 被丢弃，Leader 会将 snapshot 发给 Follower。或者当新加进一台机器时，也会发送 snapshot 给它。发送 snapshot 使用 InstalledSnapshotRPC。</p><p>做 snapshot 既不要做的太频繁，否则消耗磁盘带宽，也不要做的太不频繁，否则一旦节点重启需要回放大量日志，影响可用性。推荐当日志达到某个固定的大小做一次 snapshot。</p><h1 id="安全性">安全性</h1><h2 id="选举机制">选举机制</h2><p>Leader需要保证自己存储全部已经提交的日志条目。这样才可以使日志条目只有一个流向：从Leader 流向 Follower，Leader 永远不会覆盖已经存在的日志条目。</p><p>每个 Candidate 发送 RequestVoteRPC 时，都会带上最后一个 entry的信息。所有节点收到投票信息时，会对该 entry进行比较，如果发现自己的更新，则拒绝投票给该 Candidate。</p><p>判断日志新旧的方式：如果两个日志的 term 不同，term 大的更新；如果term 相同，更长的 index 更新。</p><h2 id="节点崩溃">节点崩溃</h2><p>如果 Leader 崩溃，集群中的节点在 electionTimeout 时间内没有收到Leader的心跳信息就会触发新一轮的选主，在选主期间整个集群对外是不可用的。</p><p>如果 Follower 和 Candidate 崩溃，处理方式会简单很多。之后发送给它的RequestVoteRPC 和 AppendEntriesRPC 会失败。由于 raft的所有请求都是幂等的，所以失败的话会无限的重试。如果崩溃恢复后，就可以收到新的请求，然后选择追加或者拒绝entry。</p><h2 id="时间与可用性">时间与可用性</h2><p>raft的要求之一就是安全性不依赖于时间：系统不能仅仅因为一些事件发生的比预想的快一些或者慢一些就产生错误。为了保证上述要求，最好能满足以下的时间条件：</p><p><code>broadcastTime &lt;&lt; electionTimeout &lt;&lt; MTBF</code></p><ul><li><code>broadcastTime</code>：向其他节点并发发送消息的平均响应时间；</li><li><code>electionTimeout</code>：选举超时时间；</li><li><code>MTBF(mean time between failures)</code>：单台机器的平均健康时间；</li></ul><p><code>broadcastTime</code> 应该比<code>electionTimeout</code> 小一个数量级，为的是使<code>Leader</code> 能够持续发送心跳信息（heartbeat）来阻止<code>Follower</code> 开始选举；</p><p><code>electionTimeout</code> 也要比<code>MTBF</code> 小几个数量级，为的是使得系统稳定运行。当<code>Leader</code> 崩溃时，大约会在整个<code>electionTimeout</code> 的时间内不可用；我们希望这种情况仅占全部时间的很小一部分。</p><p>由于 <code>broadcastTime</code> 和<code>MTBF</code> 是由系统决定的属性，因此需要决定<code>electionTimeout</code> 的时间。</p><p>一般来说，broadcastTime 一般为<code>0.5～20ms</code>，electionTimeout 可以设置为<code>10～500ms</code>，MTBF 一般为一两个月。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Raft 算法是现在分布式系统开发首选的共识算法。&lt;/strong&gt;比如：etcd、consul。&lt;strong&gt;从本质上说，Raft 算法是通过一切以领导者为准的方式，实现一系列值的共识和各节点日志的一致。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分布式算法" scheme="http://ann-zhgy.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Raft" scheme="http://ann-zhgy.github.io/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>Paxos 算法</title>
    <link href="http://ann-zhgy.github.io/2023/09/5bf1141f.html"/>
    <id>http://ann-zhgy.github.io/2023/09/5bf1141f.html</id>
    <published>2023-09-22T07:39:51.000Z</published>
    <updated>2023-11-15T06:22:06.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Paxos 算法是分布式中非常著名的算法，在过去几十年里，它基本上是分布式共识的代名词，因为当前最常用的一批共识算法都是基于它改进的。</p></blockquote><p>Paxos 算法包含 2 个部分：</p><ul><li>一个是 BasicPaxos 算法，描述的是多节点之间如何就某个值（提案 Value）达成共识；</li><li>另一个是 Multi-Paxos 思想，描述的是执行多个 Basic Paxos实例，就一系列值达成共识。</li></ul><span id="more"></span><h1 id="basic-paxos">Basic Paxos</h1><blockquote><p>Basic Paxos算法中存在一些比较重要的概念：提案、准备（Prepare）请求、接受（Accept）请求、角色等等，其中最重要的就是 “角色”。因为角色是对 BasicPaxos 中最核心的三个功能的抽象，比如，由接受者（Acceptor）对提议的值进行投票，并存储接受的值。</p></blockquote><h2 id="三种角色">三种角色</h2><p>在 BasicPaxos 中，有提议者（Proposer）、接受者（Acceptor）、学习者（Learner）三种角色：</p><ul><li><strong>提议者（Proposer）</strong>：也可以叫做协调者（coordinator），提议者负责接受客户端的请求并发起提案。提案信息通常包括提案编号(Proposal ID) 和提议的值 (Value)。</li><li><strong>接受者（Acceptor）</strong>：也可以叫做投票员（voter），负责对提议者的提案进行投票，同时需要记住自己的投票历史。</li><li><strong>学习者（Learner）</strong>：如果有超过半数接受者就某个提议达成了共识，那么学习者就需要接受这个提议，并就该提议作出运算，然后将运算结果返回给客户端。</li></ul><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230925163959" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230925163959.png" style="width: 100%;"></p></div><blockquote><p>可以理解为人大代表 (Proposer) 在人大向其它代表 (Acceptors) 提案，通过后让老百姓 (Learner) 落实。</p></blockquote><h2 id="如何达成共识">如何达成共识？</h2><h3 id="三个阶段">三个阶段</h3><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230925175645" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230925175645.png" style="width: 100%;"></p></div><ol type="1"><li><p>准备（Parpare）阶段：提议者（Proposer）向接受者（Acceptor）发出准备（Parpare）请求，接受者（Acceptor）针对收到的准备（Parpare）请求进行承诺（Promise）</p><ol type="1"><li><code>Prepare</code>：Proposer发送提案：提议者生成全局唯一递增的提案号（Proposal ID），向所有的Acceptors 发送提案，此时 Proposer无需携带提案的内容，只需要携带提案号（Proposal ID）即可。</li><li><code>Promise</code>：Acceptors 应答提案：Acceptors接收到提案之后，做出 “两个承诺，一个应答”<ul><li>两个承诺<ul><li>不再应答提案号（Proposal ID）<strong>小于等于</strong>当前请求的Prepare 请求</li><li>不在应答提案号（Proposal ID）<strong>小于</strong>当前请求的 Propose请求</li></ul></li><li>应答：不违背以前作出的承诺下，回复已经 Accept过的提案中提案号（Proposal ID）最大的那个提案的的 Value 和 ProposalID，没有则返回空值。</li></ul></li></ol></li><li><p>接受（Accept）阶段：提议者（Proposer）收到多数投票员（Acceptors）的承诺（Promise）后，向投票员（Acceptors）发出提案（Propose）请求，投票员（Acceptors）针对收到的提议（Propose）请求进行接受（Accept）处理。</p><ol type="1"><li><code>Propose</code>：Proposer 收到多数 Acceptors 的 Promise应答后，从应答种选择提案号（Proposal ID）最大的提案的Value，作为本次要发起的提案。如果所有应答的提案 Value均为空值，则可以自己随意决定提案 Value。然后携带当前 Proposal ID，向所有Acceptors 发送 Propose 请求。</li><li><code>Accept</code>：Acceptor 收到 Propose请求后，在不违背自己之前作出的承诺下，接受并持久化当前 Proposal ID和提案 Value。</li></ol></li><li><p>学习（Learn）阶段：提议者（Proposer）在收到多数投票员（Acceptors）的Accept 之后，标志着本次 Accept 成功，决议形成，将形成的决议发送给所有学习者（Learners）。</p></li></ol><h3 id="伪代码">伪代码</h3><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230925175747" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230925175747.png" style="width: 100%;"></p></div><blockquote><p>图片引自：https://pdai.tech/md/algorithm/alg-domain-distribute-x-paxos.html#multi-paxos% E7% AE%97% E6% B3%95</p></blockquote><ol type="1"><li>获取一个 <code>Proposal ID</code> n，为了保证<code>Proposal ID</code> 唯一，可采用 时间戳 + Server ID 生成；</li><li>Proposer 向所有 Acceptors 广播 Prepare (n) 请求；</li><li>Acceptor 比较 n 和 minProposal，如果n&gt;minProposal，minProposal=n，并且将 acceptedProposal 和acceptedValue 返回；</li><li>Proposer 接收到过半数回复后，如果发现有 acceptedValue返回，将所有回复中 acceptedProposal 最大的 acceptedValue 作为本次提案的value，否则可以任意决定本次提案的 value；</li><li>到这里可以进入第二阶段，广播 Accept (n,value) 到所有节点；</li><li>Acceptor 比较 n 和 minProposal，如果n&gt;=minProposal，则 acceptedProposal=minProposal=n，acceptedValue=value，本地持久化后，返回；否则，返回minProposal。</li><li>提议者接收到过半数请求后，如果发现有返回值 result&gt;n，表示有更新的提议，跳转到 1；否则 value 达成一致。</li></ol><h3 id="basic-paxos-活锁问题">Basic Paxos 活锁问题</h3><p>当某 Proposer 提交的 Proposal 被拒绝时，可能存在因为 Acceptor承诺返回了更大编号的 Proposal，该 Proposer 提高 Proposal编号继续提交的情况。一旦出现这种情况，两个 Proposer都发现自己的编号过低转而提出更高编号的Proposal，显而易见。这会导致死循环，该现象被称为<strong>活锁</strong>。用一句通俗的话来描述<strong>活锁现象</strong>：<em>你编号高，我再比你更高，反复如此，算法永远无法结束</em>。</p><h1 id="multi-paxos">Multi-Paxos</h1><blockquote><p>Basic-Paxos可以针对某个值达成共识，一旦遇到一系列的值达成共识时就会出现问题</p><p>Multi-Paxos 是一种思想，不是算法。Multi-Paxos 算法是通过 Multi-Paxos思想实现的算法的统称（如 Raft 算法）</p></blockquote><p>Basic-Paxos在针对某个值达成共识的时候，共分为<strong>准备、接受、学习</strong>三个阶段，其实在经过前两个阶段后就已经达成共识了，如果通过执行多次Basic-Paxos 来实现一系列值的共识，会存在几个问题：</p><ul><li>如果多个提议者同时提交提案，可能出现因为提案编号冲突，在准备阶段没有提议者接受到大多数准备响应，协商失败，需要重新协商。比如：一个 5 节点的集群，如果 3 个节点作为提议者同时提案，就可能发生因为没有提议者接收大多数响应（比如 1 个提议者接收到 1 个准备响应，另外 2 个提议者分别接收到 2 个准备响应）而准备失败，需要重新协商。</li><li>准备和接受阶段需要进行很多次 RPC 通讯，耗性能、延迟大。</li></ul><h2 id="领导者">领导者</h2><p>Multi-Paxos引入了<strong>领导者</strong>角色，使<strong>领导者作为唯一的提议者</strong>，这样就不存在多个提议者同时提交的情况，即：不存在提案冲突的情况</p><ul><li>选举领导者同样可以通过 Basic Paxos 实现</li></ul><hr><blockquote><p>假设领导者是稳定的</p></blockquote><h2 id="优化-basic-paxos-执行">优化 Basic-Paxos 执行</h2><p>“当领导者处于稳定状态时，可以省掉准备阶段，直接进入接受阶段”。原来是一堆人需要商议，有了领导者之后，领导者直接拍板，就省去了准备这一阶段</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Paxos 算法
是分布式中非常著名的算法，在过去几十年里，它基本上是分布式共识的代名词，因为当前最常用的一批共识算法都是基于它改进的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Paxos 算法包含 2 个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是 Basic
Paxos 算法，描述的是多节点之间如何就某个值（提案 Value）达成共识；&lt;/li&gt;
&lt;li&gt;另一个是 Multi-Paxos 思想，描述的是执行多个 Basic Paxos
实例，就一系列值达成共识。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="分布式算法" scheme="http://ann-zhgy.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Paxos" scheme="http://ann-zhgy.github.io/tags/Paxos/"/>
    
  </entry>
  
  <entry>
    <title>CAP 理论 &amp; ACID 理论 &amp; BASE 理论</title>
    <link href="http://ann-zhgy.github.io/2023/09/765e4d48.html"/>
    <id>http://ann-zhgy.github.io/2023/09/765e4d48.html</id>
    <published>2023-09-12T07:33:25.000Z</published>
    <updated>2023-11-15T06:22:06.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cap-理论">CAP 理论</h1><blockquote><p>CAP 理论是一个很好的思考框架，它对分布式系统的特性做了高度抽象，比如抽象成了一致性、可用性和分区容错性，并对特性间的冲突（也就是 CAP 不可能三角）做了总结。一旦掌握它，你就像拥有了引路人，自然而然就能根据业务场景的特点进行权衡，设计出适合的分区容错一致性模型CAP是一个<strong>学术性理论</strong>，它并没有考虑网络延时等问题，之后的 <strong>BASE 定理</strong>就是一个工程性的理论了</p></blockquote><span id="more"></span><h2 id="cap三指标">CAP 三指标</h2><blockquote><p><strong>CAP 是对数据瞬时状态的解释</strong></p></blockquote><ul><li>一致性（Consistency）：客户端的每次操作，不管访问哪个节点，要么读到的是同一份数据，要么读取失败。强调的是数据正确，即对客户端而言，每次读都能读取到最新写入的数据</li><li>可用性（Availability）：任何来自客户端的请求，必定能得到响应数据。<strong>这个指标强调的是服务可用，但不保证数据正确。</strong></li><li>分区容错性（PartitionTolerance）：当我们的系统使用分布式部署时，那个我们的数据（请求机器请求处理期间产生的数据）必定会在不同的节点进行处理，这个时候数据就产生了<strong>网络分区</strong>，即：处理数据的节点的数据必定会与其他节点不一致，而对于这种现象，我们必须容忍，没办法处理。</li></ul><h2 id="cap不可能全部满足">CAP 不可能全部满足</h2><p>CAP 不能三角最初是埃里克・布鲁尔（EricBrewer）基于自己的工程实践，提出的一个猜想，后被赛斯・吉尔伯特（SethGilbert）和南希・林奇（Nancy Lynch）证明，证明过程可以参考论文<a href="https://dl.acm.org/citation.cfm?id=564601">《Brewer’s conjectureand the feasibility of consistent, available, partition-tolerant webservices》</a></p><p>需要注意：证明过程中的 <strong>一致性（Consistency）</strong>限定了是原子一致性</p><ul><li>基于对 CAP 三指标的含义的理解，我们也可以很容易的证明 CAP 不可能同时满足：单体应用可以同时满足CA；分布式部署的应用一定存在数据分区现象，所以必须容忍 P 的存在</li></ul><h2 id="如何使用cap理论">如何使用 CAP 理论</h2><ul><li><strong>作为分布式系统，分区容错性（P）是一定存在并且已经实现的</strong>。</li><li>当选择了一致性（C）的时候，一定会读到最新的数据，不会读到旧数据，但如果因为消息丢失、延迟过高发生了网络分区，那么这个时候，当集群节点接收到来自客户端的读请求时，为了不破坏一致性，可能会因为无法响应最新数据，而返回出错信息。</li><li>当选择了可用性（A）的时候，系统将始终处理客户端的查询，返回特定信息，如果发生了网络分区，一些节点将无法返回最新的特定信息，它们将返回自己当前的相对新的信息。</li></ul><p>至于如何选择：如果读操作会读到旧数据，影响到了系统运行或业务运行（也就是说会有负面的影响），推荐选择 C，否则选 A。</p><h1 id="acid-理论">ACID 理论</h1><blockquote><p>此为事务的性质要求：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p></blockquote><p>在单机上实现并不难，比如可以通过锁、时间序列等机制保障操作的顺序执行，让系统实现 ACID 特性。但是设计分布式系统，就会比较难…… 其实，<strong>ACID 理论是对事务特性的抽象和总结，方便我们实现事务。即：如果实现了操作的 ACID 特性，那么就实现了事务。</strong></p><h2 id="分布式事务">分布式事务</h2><p>还是以苏秦为例，假如苏秦需要和赵魏韩确认是否可以攻打秦国</p><h3 id="二阶段提交">二阶段提交</h3><ol type="1"><li>苏秦发送消息给赵，然后赵就作为一个<strong>协调者（Coordinator）</strong>联系魏和韩，发起二阶段提交</li><li>赵发起二阶段提交之后，进入<strong>提交请求阶段（投票阶段）</strong>。然后等待魏和韩的回复</li><li>赵得到全部的回复结果（包括他自己的评估结果），进入<strong>提交执行阶段（又称完成阶段）</strong>，统计投票结果</li><li>赵按照 “要么全部执行，要么放弃” 的原则统计投票结果，然后将结果同步给魏和韩</li><li>接到通知后，如果结果是<strong>全部执行</strong>，赵魏韩执行事务，魏韩执行完毕后将事务的执行结果通知给赵</li><li>赵将结果返回给苏秦</li></ol><p>在这个例子中：</p><ul><li>你可以将 “赵明天攻打秦国、魏明天攻打秦国、韩明天攻打秦国”，理解成一个分布式事务操作；</li><li>将赵、魏、韩理解为分布式系统的三个节点，其中，赵是协调者（Coordinator），将苏秦理解为业务，也就是客户端；</li><li>将消息理解为网络消息；</li><li>将 “明天能否攻打秦国，预留时间”，理解为评估事务中需要操作的对象和对象状态，是否准备好，能否提交新操作。</li></ul><p>需要注意的是，在第一个阶段，每个参与者投票表决事务是放弃还是提交。一旦参与者投票要求提交事务，那么就不允许放弃事务。也就是说，<strong>在一个参与者投票要求提交事务之前，它必须保证能够执行提交协议中它自己那一部分，即使参与者出现故障或者中途被替换掉。</strong>这个特性，是我们需要在代码实现时保障的。</p><p>在第二个阶段，事务的每个参与者执行最终统一的决定，提交事务或者放弃事务。这个约定，是为了实现 ACID 中的原子性。</p><hr><p><a href="https://courses.cs.washington.edu/courses/cse551/09au/papers/CSE550BHG-Ch7.pdf">二阶段提交协议</a>最早是用来实现数据库的分布式事务的，不过现在最常用的协议是 XA 协议。这个协议是 X/Open 国际联盟基于二阶段提交协议提出的，也叫作 X/OpenDistributed Transaction Processing（DTP）模型，比如 MySQL 就是通过 MySQLXA 实现了分布式事务。</p><p>但是不管是原始的二阶段提交协议，还是 XA 协议，都存在一些问题：</p><ul><li>在提交请求阶段，需要预留资源，在资源预留期间，其他人不能操作（比如，XA 在第一阶段会将相关资源锁定）；</li><li>数据库是独立的系统。</li></ul><p>因为上面这两点，我们无法根据业务特点弹性地调整锁的粒度，而这些都会影响数据库的并发性能。</p><h3 id="tcctry-conform-cancel">TCC（try-conform-cancel）</h3><blockquote><p>TCC 是 Try（预留）、Confirm（确认）、Cancel（撤销）3 个操作的简称，它包含了预留、确认或撤销这 2 个阶段。</p></blockquote><ol type="1"><li>预留阶段：<ul><li>注册确认操作和撤销操作：苏秦分别发送消息通知赵、魏、韩，让他们预留明天的时间和相关资源。然后苏秦实现确认操作（明天攻打秦国），和撤销操作（取消明天攻打秦国）。</li><li>苏秦收到赵、魏、韩的预留答复</li></ul></li><li>如果预留阶段执行都没有问题，三国都确认可以攻打秦国，就进入确认阶段：<ul><li>苏秦执行确认操作，通知赵、魏、韩明天攻打秦国。</li><li>收到确认操作的响应，完成分布式事务。</li></ul></li><li>如果预留阶段执行出现了问题，比如魏说军队还在路上，没有就位，就进入撤销阶段：<ul><li>苏秦执行撤销操作，通知赵、魏、韩取消明天攻打秦国的计划。</li><li>收到撤销操作的响应。</li></ul></li></ol><hr><p>TCC 本质上是补偿事务，<strong>它的核心思想是针对每个操作都要注册一个与其对应的确认操作和补偿操作（也就是撤销操作）。</strong>它是一个业务层面的协议，也可以将 TCC 理解为编程模型，TCC 的 3 个操作是需要在业务代码中编码实现的，为了实现一致性，确认操作和补偿操作必须是等幂的，因为这 2 个操作可能会失败重试。</p><p>TCC 不依赖于数据库的事务，而是在业务中实现了分布式事务，这样能减轻数据库的压力，但对业务代码的入侵性也更强，实现的复杂度也更高。所以，在需要分布式事务能力时，优先考虑现成的事务型数据库（比如 MySQLXA），当现有的事务型数据库不能满足业务的需求时，再考虑基于 TCC 实现分布式事务。</p><h1 id="base-理论">BASE 理论</h1><blockquote><p>BASE 理论追求的是服务的可用性，其核心是<strong>基本可用（BasicallyAvailable）</strong> 和<strong>最终一致性（Eventuallyconsistent）</strong>，而<strong>软状态（Soft state）</strong>其实是实现服务可用性时，系统数据的一种过渡状态</p></blockquote><h2 id="基本可用">基本可用</h2><blockquote><p>基本可用即：当分布式系统出现不可预知的故障时，允许损失部分功能的可用性（服务降级）来保障核心功能的可用性，从而实现基本可用</p></blockquote><h3 id="流量削峰">流量削峰</h3><p>避免集中请求，按照实际需求将用户的请求错开。如：12306不同地方的车票售票时间不同，这样，在春运期间，购买不同目的地的用户就会在不同时间买票，从而达到流量削峰的目的</p><h3 id="延迟响应">延迟响应</h3><p>在出现超出系统处理能力的突发流量时，将用户提交的请求放在队列中，通过牺牲响应时间的可用性，保障核心功能的运行。如：12306在春运、国庆期间买票时，会出现排队中的现象，页面会显示排队中</p><h3 id="体验降级">体验降级</h3><p>比如，系统突然出现了网络热点，好多用户涌进来了，产生了海量突发流量，于是系统过载了，大量图片因为网络超时原因无法显示，此时就可以使用小图片代替原始图片，通过降低图片的清晰度和大小提升系统的处理能力</p><h3 id="过载保护">过载保护</h3><p>过载保护指的是流量激增时，将用户的请求放在请求队列中，如果请求等待超时了，就直接拒绝请求；或者是，当用来存储用户请求的队列满了之后，就清除队列中一定数量的排队请求，以此来保护系统不过载</p><h2 id="最终一致性">最终一致性</h2><p>最终一致性指的是系统的数据副本经过一段时间的处理合同后，最终可以达到一个一致的状态。即：在距离达到数据一致，有一定的延迟。</p><p>强一致性实际上就是不存在数据延迟的最终一致性。现在的互联网系统，大多数都是需要数据的最终一致性的，只有实在无法使用最终一致性，才会使用强一致性或事务。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;cap-理论&quot;&gt;CAP 理论&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;CAP 理论是一个很好的思考框架，它对分布式系统的特性做了高度抽象，比如抽象成了一致性、可用性和分区容错性，并对特性间的冲突（也就是 CAP 不可能三角）做了总结。一旦掌握它，你就像拥有了引路人，自然而然就能根据业务场景的特点进行权衡，设计出适合的分区容错一致性模型
CAP
是一个&lt;strong&gt;学术性理论&lt;/strong&gt;，它并没有考虑网络延时等问题，之后的 &lt;strong&gt;BASE 定理&lt;/strong&gt;就是一个工程性的理论了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分布式算法" scheme="http://ann-zhgy.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="CAP、ACID、BASE" scheme="http://ann-zhgy.github.io/tags/CAP%E3%80%81ACID%E3%80%81BASE/"/>
    
  </entry>
  
  <entry>
    <title>idea jrebel 插件激活</title>
    <link href="http://ann-zhgy.github.io/2023/09/a00d3e8b.html"/>
    <id>http://ann-zhgy.github.io/2023/09/a00d3e8b.html</id>
    <published>2023-09-06T04:47:01.000Z</published>
    <updated>2023-12-22T10:08:35.402Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c4288da2033a42315ae31b2f0e635e78bc83ff2642e9b11da458646ee2b191ac"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">此文档不共享</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</summary>
    
    
    
    <category term="idea-jrebel插件激活" scheme="http://ann-zhgy.github.io/categories/idea-jrebel%E6%8F%92%E4%BB%B6%E6%BF%80%E6%B4%BB/"/>
    
    
    <category term="idea-jrebel插件激活" scheme="http://ann-zhgy.github.io/tags/idea-jrebel%E6%8F%92%E4%BB%B6%E6%BF%80%E6%B4%BB/"/>
    
    <category term="passwd-b" scheme="http://ann-zhgy.github.io/tags/passwd-b/"/>
    
  </entry>
  
  <entry>
    <title>拜占庭将军问题</title>
    <link href="http://ann-zhgy.github.io/2023/04/fc431d4d.html"/>
    <id>http://ann-zhgy.github.io/2023/04/fc431d4d.html</id>
    <published>2023-04-28T06:08:53.000Z</published>
    <updated>2023-11-15T06:22:06.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜占庭将军问题（The Byzantine GeneralsProblem），它其实是借拜占庭将军的故事展现了分布式共识问题，还探讨和论证了解决的办法。</p></blockquote><span id="more"></span><h1 id="苏秦的困境">苏秦的困境</h1><p>战国时期，齐、楚、燕、韩、赵、魏、秦七雄并立，后来秦国的势力不断强大起来，成了其余六国的共同威胁。于是，这六个国家决定联合，全力抗秦，免得被秦国各个击破。一天，苏秦作为合纵长，挂六国相印，带着六国的军队叩关函谷，驻军在了秦国边境，为围攻秦国作准备。但是，因为各国军队分别驻扎在秦国边境的不同地方，所以军队之间只能通过信使互相联系，这时，苏秦面临了一个很严峻的问题：如何统一大家的作战计划？</p><p>万一一些诸侯国在暗通秦国，发送误导性的作战信息，怎么办？如果信使被敌人截杀，甚至被敌人间谍替换，又该怎么办？这些都会导致自己的作战计划被扰乱，然后出现有的诸侯国在进攻，有的诸侯国在撤退的情况，而这时，秦国一定会趁机出兵，把他们逐一击破的。</p><p><strong>所以，如何达成共识，制定统一的作战计划呢？苏秦他很愁。</strong></p><p>这个故事，是拜占庭将军问题的一个简化表述，苏秦面临的就是典型的共识难题，也就是如何在可能有误导信息的情况下，采用合适的通讯机制，让多个将军达成共识，制定一致性的作战计划？</p><h1 id="二忠一叛难题">二忠一叛难题</h1><p>先假设只有三个国家要攻打秦国，这三个国家有三个将军，分别叫齐、楚、燕。同时，又因为秦国很强大，所以只有半数以上的将军参与进攻，才能击败敌人，在这个期间，将军们彼此之间需要通过信使传递消息，然后协商一致之后，才能在同一时间点发动进攻。</p><p>有一天，这三位将军各自一脸严肃地讨论明天是进攻还是撤退，并让信使传递信息，按照 “少数服从多数” 的原则投票表决，两个人意见一致就可以了，比如：</p><ol type="1"><li>齐根据侦查情况决定撤退；</li><li>楚和燕根据侦查信息，决定进攻。</li></ol><p>那么按照原则，齐也会进攻。最终，3 支军队同时进攻，大败秦军。（本身的决定也是影响最终决定的因素之一，比如齐准备撤退，楚燕准备进攻，按照少数服从多数原则，2 进攻&gt; 1 撤退，最终齐进攻）</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230505095625" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230505095625.png" style="width: 100%;"></p></div><hr><p>问题来了：如果有人暗通秦国，做了叛徒，就会出现作战不一致的情况</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230911103611" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230911103611.png" style="width: 100%;"></p></div><ul><li>如上图所示，齐最终选择撤退，楚选择进攻，叛徒随机而变，最终的结果就是楚军失败，最终齐楚被秦逐一蚕食。这就是<strong>二忠一叛</strong>难题</li></ul><h2 id="二忠一叛难题怎么解决">二忠一叛难题怎么解决</h2><h3 id="解决办法一口信消息型拜占庭问题之解">解决办法一：口信消息型拜占庭问题之解</h3><p>三位将军分别拨出一部分军队交给苏秦带领，苏芩参与作战计划的讨论并执行命令。这样，原本的3 位将军的作战讨论就变成了 4位将军的作战讨论，这样可以增加讨论中忠诚将军的数量。</p><p>按照上面的约定，如果没有命令，就执行预设的默认命令：“撤退 "。除此之外，还约定一些流程来发送作战信息、执行作战指令，比如，<strong>进行两轮作战信息协商</strong>。</p><p><strong>第一轮：</strong></p><ul><li>先发送作战消息的将军作为指挥官，其他将军作为副官</li><li>指挥官将其作战消息发送给每位副官</li><li>每位副官，将从指挥官处收到左展信息，作为其作战指令；如果没有收到消息，使用 “撤退 " 作为作战指令</li></ul><p><strong>第二轮：</strong></p><ul><li>除了第一轮的指挥官外，剩余的 3 位将军将分别作为指挥官想另外两位见滚发送作战消息</li><li>这三位将军将按照 “少数服从多数 " 的原则执行收到的作战指令</li></ul><p><strong>图示：</strong></p><p>叛徒作为副将</p><p>第一轮：</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230911143342" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230911143342.png" style="width: 100%;"></p></div><p>第二轮：</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230911144114" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230911144114.png" style="width: 100%;"></p></div><ul><li>在叛徒作为副将捣乱的情况下，按照少数服从多数的原则，在第二轮投票统计中，齐楚燕都会选择进攻</li></ul><p>叛徒作为统领</p><p>第一轮：</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230911144557" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230911144557.png" style="width: 100%;"></p></div><p>第二轮：</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230911144643" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230911144643.png" style="width: 100%;"></p></div><ul><li>在叛徒作为统领时，在第二轮投票中，最终齐楚燕也是会选择进攻</li></ul><p>这个解决办法是兰伯特在论文《<a href="https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/">TheByzantine GeneralsProblem</a>》中提到的口信消息型拜占庭问题之解：<strong>如果叛将人数为m，将军人数不能少于 3m + 1</strong>，那么拜占庭将军问题就能解决了。</p><hr><p>这个算法有个前提，也就是叛将人数 m，或者说能容忍的叛将数m，是已知的。在这个算法中，叛将数 m 决定递归循环的次数（也就是说，叛将数m 决定将军们要进行多少轮作战信息协商），即 <span class="math inline">\(m+1\)</span>轮（所以，你看，只有楚是叛变的，那么就进行了两轮）。你也可以从另外一个角度理解：n位将军，最多能容忍 <span class="math inline">\((n - 1) / 3\)</span>位叛将。关于这个公式，你只需要记住就好了，推导过程你可以参考论文。</p><p>不过，这个算法虽然能解决拜占庭将军问题，但它有一个限制：如果叛将人数为 m，那么将军总人数必须不小于<span class="math inline">\(3m + 1\)</span>。</p><p>在二忠一叛的问题中，在存在 1 位叛将的情况下，必须增加 1 位将军，将 3 位将军协商共识，转换为 4 位将军协商共识，这样才能实现忠诚将军的一致性作战计划。</p><h3 id="解决办法二签名消息型拜占庭问题之解">解决办法二：签名消息型拜占庭问题之解</h3><p>苏秦还可以通过签名的方式，在不增加将军人数的情况下，解决二忠一叛的难题。首先，苏秦要通过印章、虎符等信物，实现这样几个特性：</p><ul><li>忠诚将军的签名无法伪造，而且对他签名消息的内容进行任何更改都会被发现；</li><li>任何人都能验证将军签名的真伪。</li></ul><p>这时，如果忠诚的将军，比如齐先发起作战信息协商，一旦叛将小楚修改或伪造收到的作战信息，那么燕在接收到楚的作战信息的时候，会发现齐的作战信息被修改，楚已叛变，这时他将忽略来自楚的作战信息，最终执行齐发送的作战信息。</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230912112238" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230912112238.png" style="width: 100%;"></p></div><p>如果是叛徒楚先发送误导的消息，那么，齐燕将按照一定的规则在排序后的所有接收到的指令中选取一个指令执行，最终执行一致的作战计划。</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230912112916" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230912112916.png" style="width: 100%;"></p></div><p>这个解决办法，是兰伯特在论文中提到的签名消息型拜占庭问题之解。而通过签名机制约束叛将的叛变行为，任何叛变行为都会被发现，也就会实现无论有多少忠诚的将军和多少叛将，忠诚的将军们总能达成一致的作战计划。</p><p>签名消息的拜占庭问题之解，也是需要进行 m+1 轮（其中 m 为叛将数，所以你看，只有楚、燕是叛变的，那么就进行了三轮协商）。你也可以从另外一个角度理解：n 位将军，能容忍 (n- 2)位叛将（只有一位忠将没有意义，因为此时不需要达成共识了）。同时，这也是一个比较理论化的算法。</p><hr><p>拜占庭问题是最为复杂的分布式故障的场景，因为其同时包含了故障场景和恶意场景。在存在恶意场景时，必须使用<strong>拜占庭容错算法</strong>；仅存在故障场景时，只需要使用<strong>非拜占庭容错算法 | 故障容错算法</strong>就可以了</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;拜占庭将军问题（The Byzantine Generals
Problem），它其实是借拜占庭将军的故事展现了分布式共识问题，还探讨和论证了解决的办法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分布式算法" scheme="http://ann-zhgy.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="拜占庭问题" scheme="http://ann-zhgy.github.io/tags/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>学习路径</title>
    <link href="http://ann-zhgy.github.io/2023/04/32213c97.html"/>
    <id>http://ann-zhgy.github.io/2023/04/32213c97.html</id>
    <published>2023-04-28T02:12:10.000Z</published>
    <updated>2023-11-15T06:22:06.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随着项目的发展，企业在实际生产中使用的是都是分布式进行部署，但是既然是分布式，那就会涉及到分布式不得不面对的问题：容错、可用、一致性</p></blockquote><span id="more"></span><h1 id="分布式算法的四度空间四个重要指标">分布式算法的四度空间（四个重要指标）</h1><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">拜占庭容错</th><th style="text-align: center;">一致性</th><th style="text-align: center;">性能</th><th style="text-align: center;">可用性</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"> 2PC</td><td style="text-align: center;"> 否</td><td style="text-align: center;">强一致</td><td style="text-align: center;">低</td><td style="text-align: center;">低</td></tr><tr class="even"><td style="text-align: center;"> TCC</td><td style="text-align: center;"> 否</td><td style="text-align: center;">最终一致</td><td style="text-align: center;">低</td><td style="text-align: center;">低</td></tr><tr class="odd"><td style="text-align: center;"> Paxos</td><td style="text-align: center;"> 否</td><td style="text-align: center;">强一致</td><td style="text-align: center;">中</td><td style="text-align: center;">中</td></tr><tr class="even"><td style="text-align: center;"> ZAB</td><td style="text-align: center;"> 否</td><td style="text-align: center;">最终一致</td><td style="text-align: center;">中</td><td style="text-align: center;">中</td></tr><tr class="odd"><td style="text-align: center;"> Raft</td><td style="text-align: center;"> 否</td><td style="text-align: center;">强一致</td><td style="text-align: center;">中</td><td style="text-align: center;">中</td></tr><tr class="even"><td style="text-align: center;"> Gossip</td><td style="text-align: center;"> 否</td><td style="text-align: center;">最终一致</td><td style="text-align: center;">高</td><td style="text-align: center;">高</td></tr><tr class="odd"><td style="text-align: center;"> Quorum NWR</td><td style="text-align: center;"> 否</td><td style="text-align: center;">强一致</td><td style="text-align: center;">中</td><td style="text-align: center;">中</td></tr><tr class="even"><td style="text-align: center;"> PBFT</td><td style="text-align: center;"> 是</td><td style="text-align: center;"> N/A</td><td style="text-align: center;"> 低</td><td style="text-align: center;">中</td></tr><tr class="odd"><td style="text-align: center;"> POW</td><td style="text-align: center;"> 是</td><td style="text-align: center;"> N/A</td><td style="text-align: center;"> 低</td><td style="text-align: center;">中</td></tr></tbody></table><h2 id="拜占庭容错">拜占庭容错</h2><p>拜占庭错误是莱斯利・兰伯特在《拜占庭将军问题》中提出的一个错误模型，描述了一个完全不可信的场景，除了存在故障行为，还存在恶意行为。顾名思义，拜占庭容错（ByzantineFault Tolerance，BFT），就是指能容忍拜占庭错误了。</p><p>斐拜占庭容错又叫做<strong>故障容错（Crash FaultTolerance，CFT）</strong>，解决的是分布式系统中存在故障，但不存在恶意节点的共识问题，比如进程奔溃，服务器硬件故障等等。</p><p>一般而言，在可信环境（比如企业内网）中，系统具有故障容错能力就可以了，常见的算法有二阶段提交协议（2PC）、TCC（Try-Confirm-Cancel）、Paxos 算法、ZAB 协议、Raft 算法、Gossip 协议、QuorumNWR 算法。</p><p>而在不可信的环境（比如有人做恶）中，这时系统需要具备拜占庭容错能力，常见的拜占庭容错算法有 POW 算法、PBFT 算法。</p><h2 id="一致性">一致性</h2><p>分布式系统中，一致性分为三类：</p><ul><li>强一致性：保证写操作完成后，任何后续访问都能马上读取到更新后的值</li><li>弱一致性：写操作完成后，系统不能保证后续访问都能读取到更新后的值</li><li>最终一致性：保证如果对某个对象没有新的写操作了，最终后续访问都能读取到相同的最近更新的值</li></ul><p>但是，强一致性是有多重含义的：</p><ol type="1"><li>在埃里克・布鲁尔的猜想中，CAP 中的强一致性（也就是 C）是指 ACID 的 C，系统状态的一致性，而这种一致性，可以通过二阶段提交协议来实现。</li><li>在 CAP 定理中，CAP 中的强一致性（也就是 C）是指原子一致性（也就是线性一致性）。其中，Paxos、Raft 能实现线性一致性，而 ZooKeeper 基于读性能的考虑，它通过 ZAB 协议提供的是最终一致性。</li></ol><p>一般而言，在需要系统状态的一致性时，你可以考虑采用二阶段提交协议、TCC。在需要数据访问是的强一致性时，你可考虑 Raft 算法。在可用性优先的系统，你可以采用 Gossip 协议来实现最终一致性，并实现 QuorumNWR 来提供强一致性。</p><p>另外，很多人将 Consensus（共识）当成了一致性，也就是称为 Paxos、Raft 为一致性算法，其实 Paxos 和 Raft 是共识算法。而之所以出现这个问题，是因为在很多中文文章中，将 Consensus 和 Consistency 都翻译成了一致性，其实这样是不合适的，因为共识（Consensus）和一致性（Consistency）是两个完全不同的概念。</p><ul><li>共识：各节点就指定值（Value）达成共识，而且达成共识后的值，就不再改变了。</li><li>一致性：是指写操作完成后，能否从各节点上读到最新写入的数据，如果立即能读到，就是强一致性，如果最终能读到，就是最终一致性。</li></ul><p>提到共识算法，Paxos 是一个必须要提及的话题，而且 ZAB 协议、Raft 算法都可以看作是 Paxos 变种，所以，你需要了解 Paxos 算法。</p><p>但因为 Paxos 算法的可理解性和可编程性痛点突出，所以在实际场景中，最常的共识算法是 Raft，我们可以基于 Raft 实现强一致性系统</p><h2 id="可用性">可用性</h2><p>可用性说的是任何来自客户端的请求，不管访问哪个非故障节点，都能得到响应数据，但不保证是同一份最新数据，可用性强调的是服务可用。</p><p>一般来讲，采用 Gossip 协议实现最终一致性系统，它的可用性是最高的，因为哪怕只有一个节点，集群还能在运行并提供服务。其次是 Paxos 算法、ZAB 协议、Raft 算法、QuorumNWR 算法、PBFT 算法、POW 算法，它们能容忍一定数节点故障。</p><p>最后是二阶段提交协议、TCC，只有当所有节点都在运行时，才能工作，可用性最低。</p><h2 id="性能">性能</h2><p>一般来讲，采用 Gossip 协议的 AP 型分布式系统，具备水平扩展能力，读写性能是最高的。其次是 Paxos 算法、ZAB 协议、Raft 算法，因为它们都是领导者模型，写性能受限于领导者，读性能取决于一致性实现。最后是二阶段提交协议和 TCC，因为在实现事务时，需要预留和锁定资源，性能相对低。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;随着项目的发展，企业在实际生产中使用的是都是分布式进行部署，但是既然是分布式，那就会涉及到分布式不得不面对的问题：容错、可用、一致性&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分布式算法" scheme="http://ann-zhgy.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="分布式算法学习路径" scheme="http://ann-zhgy.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>动归 ——（四）动态规划是啥？</title>
    <link href="http://ann-zhgy.github.io/2023/04/61a8be5c.html"/>
    <id>http://ann-zhgy.github.io/2023/04/61a8be5c.html</id>
    <published>2023-04-18T08:45:53.000Z</published>
    <updated>2023-11-15T06:22:06.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划是一种思想">动态规划是一种思想</h1><p>“动态规划算法 "，相信有很多人这个叫，但是更贴切的来说，动态规划是一种思想，指导我们解决问题的思想</p><span id="more"></span><h2 id="算法思想">算法？思想？</h2><p>我们知道<strong>算法 +数据结构</strong>，这是一个紧密的组合，比如说要对一个无序数组排序，数据结构就是数组，可供选择的算法比如：快速排序、选择排序等</p><p>所以，算法其实是一类问题的经验总结，是解决问题的套路。那么思想是什么呢？在学习《数据结构与算法》这门课时，应该都听过很多算法都是使用的<strong>分治思想</strong>，尤其是在归并排序中经常被提及。</p><p>动态规划的思想在于：<strong>你需要利用已经计算好的结果来推导你的计算，即：大规模问题的结果是由小规模问题的结果运算得来的</strong></p><p><strong>算法是一种经验总结，而思想是用来指导我们解决问题的</strong></p><h1 id="动态规划问题的典型特点">动态规划问题的典型特点</h1><h2 id="求最优解问题最大值最小值">求 “最” 优解问题（最大值、最小值）</h2><p>除非碰到的问题是简单到找出一个数组中最大的值这样，对这种问题来说，你可以对数组进行排序，然后取数组头或尾部的元素，如果觉得麻烦，你也可以直接遍历得到最值。否则，你就得考虑使用动态规划来解决这个问题了。这样的问题一般都会让你求最大子数组、求最长递增子数组、求最长递增子序列或求最长公共子串、子序列等等。</p><p>既然是要求最值，不妨先想一下核心问题是什么。其实在真的解决最值问题的时候，你应该按照这样的思考顺序来解决问题：</p><ul><li>优先考虑使用贪心算法的可能性；</li><li>然后是暴力递归进行穷举（但这里的数据规模不大）；</li><li>还是不行呢？选择动态规划！</li></ul><h3 id="乘积最大子数组">1. <strong>乘积最大子数组</strong></h3><p>问题：给你一个整数数组numbers，找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），返回该子数组的乘积。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">输入: [2,7,-2,4]</span></span><br><span class="line"><span class="section">输出: 14</span></span><br><span class="line"><span class="section">解释: 子数组 [2,7] 有最大乘积 14。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例2：</span><br><span class="line">输入: [<span class="string">-5</span>,0,3,<span class="string">-1</span>]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 结果不能为 15, 因为 [<span class="string">-5</span>,3,<span class="string">-1</span>] 不是子数组，是子序列。</span><br></pre></td></tr></tbody></table></figure><p>首先，很明显这个题目当中包含一个 “最” 字，使用动态规划求解的概率就很大。这个问题的目的就是从数组中寻找一个最大的连续区间，确保这个区间的乘积最大。由于每个连续区间可以划分成两个更小的连续区间，而且大的连续区间的结果是两个小连续区间的乘积，因此这个问题还是求解满足条件的最大值，同样可以进行问题分解，而且属于求最值问题。同时，这个问题与求最大连续子序列和比较相似，唯一的区别就是你需要在这个问题里考虑正负号的问题，其它就相同了。</p><h3 id="最长回文子串">2. <strong>最长回文子串</strong></h3><p>问题：给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例<span class="number">1</span>：</span><br><span class="line">输入: <span class="string">"babad"</span></span><br><span class="line">输出: <span class="string">"bab"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例<span class="number">2</span>：</span><br><span class="line">输入: <span class="string">"cbbd"</span></span><br><span class="line">输出: <span class="string">"bb"</span></span><br></pre></td></tr></tbody></table></figure><p>这个问题依然包含一个 “最” 字，同样由于求解的最长回文子串肯定包含一个更短的回文子串，因此我们依然可以使用动态规划来求解这个问题。</p><h3 id="最长上升子序列">3. <strong>最长上升子序列</strong></h3><p>问题：给定一个无序的整数数组，找到其中最长上升子序列的长度。可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入: [<span class="number">10,9,2,5</span>,<span class="number">3,7,66,18</span>]</span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: 最长的上升子序列是 [<span class="number">2,3,7,66</span>]，它的长度是 <span class="number">4</span>。</span><br></pre></td></tr></tbody></table></figure><p>这个问题依然是一个最优解问题，假设我们要求一个长度为 5 的字符串中的上升自序列，我们只需要知道长度为 4 的字符串最长上升子序列是多长，就可以根据剩下的数字确定最后的结果。</p><h2 id="求可行性true或false">求可行性（True 或 False）</h2><p>判断是否存在一条总和为 x 的路径（如果找到了，就是 True；如果找不到，自然就是 False），或者让你判断能否找到一条符合某种条件的路径，那么这类问题都可以归纳为求可行性问题，硬币找零就属于求可行性的一种</p><h3 id="凑零兑换问题">1. <strong>凑零兑换问题</strong></h3><p>问题：给你 k 种面值的硬币，面值分别为 c1, c2 …ck，每种硬币的数量无限，再给一个总金额amount，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，算法返回 -1。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line">输入: <span class="attribute">c1</span>=1, <span class="attribute">c2</span>=2, <span class="attribute">c3</span>=5, <span class="attribute">c4</span>=7, amount = 15</span><br><span class="line">输出: 3</span><br><span class="line">解释: 11 = 7 + 7 + 1。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例2：</span><br><span class="line"><span class="section">输入: c1=3, amount =7</span></span><br><span class="line"><span class="section">输出: -1</span></span><br><span class="line"><span class="section">解释: 3怎么也凑不到7这个值。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串交错组成问题">2. <strong>字符串交错组成问题</strong></h3><p>问题：给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2交错组成的。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line">输入: <span class="attribute">s1</span>=<span class="string">"aabcc"</span>,s2 =<span class="string">"dbbca"</span>,<span class="attribute">s3</span>=<span class="string">"aadbbcbcac"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释: 可以交错组成。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例<span class="number">2</span>：</span><br><span class="line">输入: <span class="built_in">s1</span>=<span class="string">"aabcc"</span>,<span class="built_in">s2</span>=<span class="string">"dbbca"</span>,<span class="built_in">s3</span>=<span class="string">"aadbbbaccc"</span></span><br><span class="line">输出: false</span><br><span class="line">解释:无法交错组成。</span><br></pre></td></tr></tbody></table></figure><h2 id="求方案总数">求方案总数</h2><p>比如给定一个数据结构和限定条件，让你计算出一个方案的所有可能的路径，那么这种问题就属于求方案总数的问题。</p><h3 id="硬币组合问题">1. <strong>硬币组合问题</strong></h3><p>问题：英国的英镑硬币有 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), 和 £2(200p)。比如我们可以用以下方式来组成 2 英镑：1×£1 + 1×50p + 2×20p + 1×5p +1×2p + 3×1p。问题是一共有多少种方式可以组成 n 英镑？注意不能有重复，比如1 英镑 + 2 个 50P 和 50P+50P+1 英镑是一样的。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">输入: 2</span></span><br><span class="line"><span class="section">输出: 73682 </span></span><br></pre></td></tr></tbody></table></figure><h3 id="路径规划问题">2. 路径规划问题</h3><p>问题：一个机器人位于一个 m x n网格的左上角。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角，共有多少路径？</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">输入: 2 2</span></span><br><span class="line"><span class="section">输出: 2</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">输入: 3 3</span></span><br><span class="line"><span class="section">输出: 6</span></span><br></pre></td></tr></tbody></table></figure><ul><li>求方案总数的动态规划问题一般都指的是求 “一个” 方案的所有具体形式。如果是求 “所有” 方案的具体形式，那这种肯定不是动态规划问题，而是使用递归来遍历出所有方案的具体形式。</li></ul><h1 id="有些问题并不是动态规划的问题">有些问题并不是动态规划的问题</h1><h2 id="数据不可排序">数据不可排序</h2><h3 id="最小的k个数"><strong>最小的 k 个数</strong></h3><p>问题：输入整数数组 arr ，找出其中最小的 k个数。例如，输入 4、5、1、6、2、7、3、8 这 8 个数字，则最小的 4 个数字是 1、2、3、4。</p><figure class="highlight inform7"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line">输入：arr = <span class="comment">[3,2,1]</span>, k = 2</span><br><span class="line">输出：<span class="comment">[1,2]</span> 或者 <span class="comment">[2,1]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight inform7"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例2：</span><br><span class="line">输入：arr = <span class="comment">[0,1,2,1]</span>, k = 1</span><br><span class="line">输出：<span class="comment">[0]</span></span><br></pre></td></tr></tbody></table></figure><p>我们发现虽然这个问题也是求 “最” 值，但其实只要通过排序就能解决</p><h2 id="数据不可交换non-swapable">数据不可交换（Non-swapable）</h2><p>还有一类问题，可以归类到我们总结的几类问题里去，但是不存在动态规划要求的重叠子问题（比如经典的八皇后问题），那么这类问题就无法通过动态规划求解</p><h3 id="全排列"><strong>全排列</strong></h3><p>问题：给定一个没有重复数字的序列，返回其所有可能的全排列。</p><figure class="highlight inform7"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入: <span class="comment">[1,2,3]</span></span><br><span class="line">输出:</span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  <span class="comment">[1,2,3]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[1,3,2]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[2,1,3]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[2,3,1]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[3,1,2]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[3,2,1]</span></span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个问题虽然是求组合，但没有重叠子问题，更不存在最优化的要求</p><h1 id="由于本人对于动归看的很迷所以暂时停止了之后还会继续的">由于本人对于动归看的很迷，所以暂时停止了，之后还会继续的</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;动态规划是一种思想&quot;&gt;动态规划是一种思想&lt;/h1&gt;
&lt;p&gt;“动态规划算法 &quot;，相信有很多人这个叫，但是更贴切的来说，动态规划是一种思想，指导我们解决问题的思想&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="http://ann-zhgy.github.io/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
    <category term="动态规划使用" scheme="http://ann-zhgy.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>动归 ——（三）前置 —— 贪心算法</title>
    <link href="http://ann-zhgy.github.io/2023/04/dd74b71d.html"/>
    <id>http://ann-zhgy.github.io/2023/04/dd74b71d.html</id>
    <published>2023-04-16T06:20:57.000Z</published>
    <updated>2023-11-15T06:22:06.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>贪心算法是求解整体最优的真正思路源头，但是这个算法是有局限性的，它只能在局部最优的思想下工作，<strong>那么当贪心算法失效了怎么办？</strong></p></blockquote><h1 id="从最优化问题到递归">从最优化问题到递归</h1><blockquote><p>贪心算法失效的很大一部分原因在于它算的是<strong>局部最优解</strong>，所谓局部最优，就是只考虑当前的最大利益，所以在绝大多数情况下，贪心算法获取的是最优解的一个最大近似解</p></blockquote><span id="more"></span><h2 id="最优化问题的本质">最优化问题的本质</h2><p>所谓最优化问题，就是指在某些约束条件下，决定可选择的变量应该取何值，使所选定的目标函数达到最优的问题。</p><p>从数学意义上说，最优化方法是一种求极值的方法，即在一组约束为等式或不等式的条件下，使系统的目标函数达到极值，即最大值或最小值。</p><p>如果只是从概念上来看最优化问题真的是玄而又玄，所以用硬币找零的例子，引出最优化的概念。</p><p>在数学里一切都是函数，现在我们先把这个问题用函数形式来表示。为了易于理解，下面我们不会使用向量。</p><p>我们假定需要给出<span class="math inline"> \(y\)</span> 元硬币，硬币面额是 5 元和 3 元，求出需要的最少硬币数量。所谓的最少硬币数量就是 5 元硬币和 3 元硬币的总数，假定 5 元硬币数量为<span class="math inline"> \(x_{0}\)</span>，3 元硬币数量为<span class="math inline"> \(x_{1}\)</span>，那么用函数表示就是：</p><p><span class="math display">\[f(x_{0}, x_{1})=x_{0}+x_{1}\]</span></p><p>这就是所谓的 “目标函数”。</p><p>但是这个函数现在是没有任何限制的，我们希望对此进行约束，使得 5 元硬币和 3 元硬币的面值综合为<span class="math inline"> \(y\)</span>。为此我们需要给出一个约束：</p><p><span class="math display">\[5x_{0}+3x_{1}=y\]</span></p><p>这个时候我们的问题就变成了，当满足这个约束条件的时候，求解函数中的变量<span class="math inline"> \(x_{0}\)</span> 和<span class="math inline"> \(x_{1}\)</span>，使得目标函数<span class="math inline"> \(f(x_{0},x_{1})\)</span> 的取值最小。如果用数学的描述方法来说的话，就是下面这样：</p><p><span class="math display">\[{argmin}_{(x_0,x_1)in S} (x_0+x_1)\]</span></p><p>这个就是我们常见的<span class="math inline"> \(argmin\)</span> 表示方式。它的意思是：当<span class="math inline"> \((x_{0}, x_{1})\)</span> 属于<span class="math inline"> \(S\)</span> 这个集合的时候，希望知道<span class="math inline"> \(x_{0} + x_{1}\)</span> 的最小值是多少。其中<span class="math inline"> \(S\)</span> 集合的条件就是上面的约束。</p><p>所以最优化问题在我们生活中是非常普遍的，只不过大多数问题可能都像硬币找零问题这样看起来普普通通，概念其实是不难理解的。</p><p>回到硬币找零这个问题上。由于<span class="math inline"> \((x_{0},x_{1})\)</span> 都是离散的值，因此所有满足上述约束的<span class="math inline"> \((x_{0},x_{1})\)</span> 组合，就是我们最终所求的集合！而这个最优化问题的本质就是：从所有满足条件的组合<span class="math inline"> \((x_{0},x_{1})\)</span> 中找出一个组合，使得<span class="math inline"> \(x_{0}+x_{1}\)</span> 的值最小。</p><p>所以，你会发现在这种离散型的最优化问题中，本质就是从所有满足条件的组合（能够凑出<span class="math inline"> \(y\)</span> 元）中选择出使得我们的目标函数（所有硬币数量之和）最小的那个组合。而这个所谓满足条件的组合不就是<span class="math inline"> \(argmin\)</span> 公式中的那个集合<span class="math inline"> \(S\)</span> 吗？</p><p>因此，这种离散型的最优化问题就是去所有满足条件的组合里找出最优解的组合。我曾多次提到的<strong>局部最优</strong>就是在一定条件下的最优解，而<strong>整体最优</strong>就是我们真正希望得到的最优解。</p><p>那么我们的视角就转到另一边了：如何去找到这个最优解呢？</p><h2 id="最优组合的求解策略枚举与递归">最优组合的求解策略：枚举与递归</h2><p>对于大多数问题来说，最直接暴力的方法就是穷举，但是基本上也是效率最低的方法</p><p>在硬币找零问题中，假设现在需要给出 25 元的硬币，有两种组合，分别是 (5,0) 和 (2,5)，也就是 5 个 5 元硬币，或者 2 个 5 元硬币加上 5 个 3 元硬币，那么硬币数量最小的组合肯定就是 (5,0)。</p><p>所以最简单的方法就是找出所有满足条件的组合，也就是上面两个组合，然后去看这些组合中的最优解。</p><p>现在问题来了，怎么获取那些组合呢？递归</p><h1 id="递归与问题表达">递归与问题表达</h1><p>其实最优化问题使用递归处理是很清晰的，递归是处理组合搜索的一种最直观的思路。那么，什么是递归？</p><h2 id="斐波那契数列">斐波那契数列</h2><p>斐波那契数列可以很好的展示递归的概念</p><blockquote><p>斐波那契数通常用 F (n) 表示，形成的序列称为斐波那契数列。该数列由 0 和1 开始，后面的每一项数字都是前面两项数字的和：</p><p><span class="math display">\[F(n)=F(n-1)+F(n-2),n&gt;1\]</span></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：F<span class="comment">(2)</span> = F<span class="comment">(1)</span> + F<span class="comment">(0)</span> = <span class="number">1</span> + <span class="number">0</span> = <span class="number">1</span>。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：F<span class="comment">(3)</span> = F<span class="comment">(2)</span> + F<span class="comment">(1)</span> = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2.</span></span><br></pre></td></tr></tbody></table></figure></blockquote><p>这个问题最简单的实现：</p><blockquote><p><code>AbstraceFibonacci</code> 为了测试方便，抽取抽象类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFibonacci</span> {</span><br><span class="line">    <span class="meta">@Getter(AccessLevel.PROTECTED)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取计算结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 第几个斐波那契数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFibonacciResult</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        }</span><br><span class="line">        startStatisticsCalcCount();</span><br><span class="line">        preCalcHandle(n);</span><br><span class="line">        <span class="keyword">return</span> calcResult(n);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取计算的次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">calcCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的计算的逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 第几个斐波那契数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">calcResult</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算前处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 第几个斐波那契数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">preCalcHandle</span><span class="params">(<span class="type">int</span> n)</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算次数自增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">countAutoincrementOne</span><span class="params">()</span> {</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化计算次数，开始统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startStatisticsCalcCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></blockquote><ul><li><p>循环实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoopFibonacci</span> <span class="keyword">extends</span> <span class="title class_">AbstractFibonacci</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calcResult</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">fib1</span> <span class="operator">=</span> <span class="number">0</span>, fib2 = <span class="number">1</span>, temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">            countAutoincrementOne();</span><br><span class="line">            temp = fib1 + fib2;</span><br><span class="line">            fib1 = fib2;</span><br><span class="line">            fib2 = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calcCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getCount();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>递归实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionFibonacci</span> <span class="keyword">extends</span> <span class="title class_">AbstractFibonacci</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calcResult</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        countAutoincrementOne();</span><br><span class="line">        <span class="keyword">return</span> calcResult(n - <span class="number">2</span>) + calcResult(n - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calcCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getCount();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>可以比较一下循环实现和递归实现的不同：递归的实现看起来更加符合题目，更容易理解；循环理解起来相对复杂</p></li></ul><hr><p>上文中最后的实现就使用到了递归</p><h1 id="深入理解递归">深入理解递归</h1><h2 id="堆栈与方法状态存储">堆栈与方法状态存储</h2><p>拿 <code>Java</code> 举例，程序运行时，JVM为每个线程提供了一个虚拟机栈，当方法 A 调用方法 B 时，JVM 会先保存方法 A在调用点的上下文信息，比如：局部变量、代码行数…… 之后将方法 B需要的参数、返回类型等信息封装为一个栈帧压入到虚拟机栈中，因为栈是一个先进后出的结构，方法B 执行完成后，方法 B 的栈帧就会弹栈，方法 A 再继续执行</p><ul><li>递归调用一定会有保存现场、封装栈帧等操作，所以一般来说效率是要比循环低很多的</li></ul><h2 id="递归与回溯">递归与回溯</h2><p>在求解最优化的问题时我们经常使用 <strong>回溯</strong>这个策略，对于这类问题，回溯和递归一样重要</p><h2 id="斐波那契数列递归存在的问题">斐波那契数列：递归存在的问题</h2><p>以递归版的斐波那契数列的递归实现为例，画出执行流程：n = 7</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20230417175449" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230417175449.png" style="width: 100%;"></p></div><p>从上面图片可以看出递归形式的斐波那契是包含很多重复计算的，上文的硬币求解问题一样，存在很多重复计算，这就是暴力穷举的弊端</p><h1 id="暴力递归的问题与优化">暴力递归的问题与优化</h1><h2 id="问题">问题</h2><p>暴力递归会穷举所有的情况，但是这种穷举法执行效率低下</p><p>上图中看到的那些重复的节点其实就是重叠子的问题</p><h2 id="优化">优化</h2><p>递归最重要的优化点就是如何避免重复计算</p><h3 id="备忘录">备忘录</h3><p>所谓备忘录就是将递归的中间计算结果缓存起来，等到再次调用到相同计算时，直接获取结果</p><ol type="1"><li><p>斐波那契数列 + 备忘录</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionFibonacciWithMemorandum</span> <span class="keyword">extends</span> <span class="title class_">AbstractFibonacci</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] cache = {};</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calcResult</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (cache[n - <span class="number">1</span>] != -<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> cache[n - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        countAutoincrementOne();</span><br><span class="line">        <span class="type">int</span> <span class="variable">fibonacciN</span> <span class="operator">=</span> calcResult(n - <span class="number">2</span>) + calcResult(n - <span class="number">1</span>);</span><br><span class="line">        cache[n - <span class="number">1</span>] = fibonacciN;</span><br><span class="line">        <span class="keyword">return</span> fibonacciN;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calcCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getCount();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">preCalcHandle</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(cache, -<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以比较一下三种实现计算次数的区别：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    List&lt;AbstractFibonacci&gt; fibonacciList = Arrays.asList(<span class="keyword">new</span> <span class="title class_">LoopFibonacci</span>(), <span class="keyword">new</span> <span class="title class_">RecursionFibonacci</span>(), <span class="keyword">new</span> <span class="title class_">RecursionFibonacciWithMemorandum</span>());</span><br><span class="line">    fibonacciList.forEach(fibonacci -&gt; {</span><br><span class="line">        System.out.println(<span class="string">"------"</span> + fibonacci.getClass().getName() + <span class="string">"------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + fibonacci.getFibonacciResult(<span class="number">21</span>));</span><br><span class="line">        System.out.println(<span class="string">"calcCount = "</span> + fibonacci.calcCount());</span><br><span class="line">     });</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><div style="max-width: 75%; margin: auto; opacity: 0.95;"><pre><code>&lt;img alt="20230417200313" src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230417200313.png" style="width: 100%;"&gt;</code></pre></div></li><li><p>硬币问题 + 备忘录</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> <span class="keyword">extends</span> <span class="title class_">AbstractCoinChange</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo03</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span>[] parValue)</span> {</span><br><span class="line">        <span class="built_in">super</span>(total, parValue);</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">int</span>[total];</span><br><span class="line">        Arrays.fill(cache, Integer.MIN_VALUE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getMinCount(getTotal(), <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span> parValueIndex)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">parValueLength</span> <span class="operator">=</span> getParValue().length;</span><br><span class="line">        <span class="keyword">if</span> (parValueLength == parValueIndex) {</span><br><span class="line">            <span class="keyword">return</span> NO_RESULT_CODE;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">currCoinValue</span> <span class="operator">=</span> getParValue()[parValueIndex];</span><br><span class="line">        <span class="type">int</span> <span class="variable">currCoinValueMaxCount</span> <span class="operator">=</span> total / currCoinValue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> currCoinValueMaxCount; count &gt;= <span class="number">0</span>; count--) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> total - currCoinValue * count;</span><br><span class="line">            <span class="comment">// 如果余额为 0，说明组合完毕了，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (rest == <span class="number">0</span>) {</span><br><span class="line">                cache[total - <span class="number">1</span>] = count;</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (cache[rest - <span class="number">1</span>] != Integer.MIN_VALUE) {</span><br><span class="line">                <span class="keyword">return</span> cache[rest - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 使用剩余的面额尝试组合</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">restCount</span> <span class="operator">=</span> getMinCount(rest, parValueIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果没有返回 NO_RESULT_CODE，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (restCount != NO_RESULT_CODE) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> count + restCount;</span><br><span class="line">                cache[rest - <span class="number">1</span>] = result;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> NO_RESULT_CODE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">794729356</span>;</span><br><span class="line">    <span class="type">int</span>[] parValue = {<span class="number">25</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>};</span><br><span class="line">    List&lt;AbstractCoinChange&gt; coinChangeList = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Demo01</span>(total, parValue), <span class="keyword">new</span> <span class="title class_">Demo02</span>(total, parValue), <span class="keyword">new</span> <span class="title class_">Demo03</span>(total, parValue));</span><br><span class="line">    coinChangeList.forEach(coinChange -&gt; {</span><br><span class="line">        System.out.println(<span class="string">"------"</span> + coinChange.getClass().getName() + <span class="string">"------"</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">minCount</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10000000</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">            minCount = coinChange.getMinCount();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + minCount);</span><br><span class="line">        System.out.println(<span class="string">"time = "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></blockquote><div style="max-width: 75%; margin: auto; opacity: 0.95;"><pre><code>&lt;img alt="20230418102559" src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic20230418102559.png" style="width: 100%;"&gt;</code></pre></div><p><code>Demo01</code> 是错误的实现，可以不用看，<code>Demo02</code>是不包含备忘录的实现，<code>Demo03</code>是包含备忘录的实现，可以看出其运行时间差距是很大的</p></li></ol><h1 id="硬币问题">硬币问题</h1><p>我们提到过递归的运行效率通常要比循环慢得多，所以对于硬币问题，或许我们也可以找到使用循环解决的方法呢？</p><h2 id="递归和循环解决问题思路的不同">递归和循环解决问题思路的不同</h2><p>我们可以对比斐波那契的两种实现方式：</p><ol type="1"><li>递归：当使用递归实现时，可以很明显地看到斐波那契的计算公式及定义<span class="math inline">\(f(n) = f(n-1) +f(n-2)\)</span>，所以，使用递归其实是自顶向下的进行计算。我先计算 <span class="math inline">\(f(n)\)</span> 的值，但是我在计算 <span class="math inline">\(f(n)\)</span> 的值的时候发现我需要计算 <span class="math inline">\(f(n-1)\)</span> 和 <span class="math inline">\(f(n-2)\)</span> 的值，那我就去计算 <span class="math inline">\(f(n-1)\)</span> 和 <span class="math inline">\(f(n-2)\)</span> 的值，直到计算到 <span class="math inline">\(f(1)\)</span> 和 <span class="math inline">\(f(2)\)</span>，因为 <span class="math inline">\(f(1)\)</span> 和 <span class="math inline">\(f(2)\)</span>是计算斐波那契的最基础的两个值。</li><li>循环：当使用循环实现时，我们其实是先定义好的 <span class="math inline">\(f(1)\)</span> 和 <span class="math inline">\(f(2)\)</span>，然后开始计算 <span class="math inline">\(f(3)\)</span>，直到计算到 <span class="math inline">\(f(n)\)</span>，所以使用循环其实是自底向上的进行计算</li></ol><p>所以，<strong>当我们使用递归加备忘录时，我们需要查询子问题是否计算过，而我们使用循环时，我们是先处理的子问题，然后才处理的大问题，我们可以保证所有的子问题一定是处理过的</strong></p><h2 id="循环实现">循环实现</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> <span class="keyword">extends</span> <span class="title class_">AbstractCoinChange</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo04</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span>[] parValue)</span> {</span><br><span class="line">        <span class="built_in">super</span>(total, parValue);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[getTotal() + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(result, NO_RESULT_CODE);</span><br><span class="line">        result[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= getTotal(); i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> value : getParValue()) {</span><br><span class="line">                <span class="keyword">if</span> (i - value &lt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (result[i - value] == NO_RESULT_CODE) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                result[i] = result[i - value] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result[getTotal()];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>其实在实际测试的时候我们会发现这种方式花费的时间会更长，个人理解应该是计算了很多不必要的计算，比如 11 块钱，本来计算一下3、6、11 就好了，但是这种方式从 0 到 11全部计算了一遍，所以花费时间更长</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;贪心算法是求解整体最优的真正思路源头，但是这个算法是有局限性的，它只能在局部最优的思想下工作，&lt;strong&gt;那么当贪心算法失效了怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;从最优化问题到递归&quot;&gt;从最优化问题到递归&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;贪心算法失效的很大一部分原因在于它算的是
&lt;strong&gt;局部最优解&lt;/strong&gt;，所谓局部最优，就是只考虑当前的最大利益，所以在绝大多数情况下，贪心算法获取的是最优解的一个最大近似解&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="动态规划" scheme="http://ann-zhgy.github.io/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
    <category term="贪心算法" scheme="http://ann-zhgy.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动归 ——（二）前置 —— 贪心算法</title>
    <link href="http://ann-zhgy.github.io/2023/03/7311facc.html"/>
    <id>http://ann-zhgy.github.io/2023/03/7311facc.html</id>
    <published>2023-03-16T03:27:26.000Z</published>
    <updated>2023-11-15T06:22:06.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>任何算法都有它的局限性，贪心算法也如此</strong></p></blockquote><span id="more"></span><h1 id="硬币找零问题">硬币找零问题</h1><blockquote><p>问题：给定 n 种不同面值的硬币，分别记为 c [0], c [1], c [2], …c [n]，同时还有一个总金额 k，编写一个函数计算出<strong>最少</strong>需要几枚硬币凑出这个金额 k？每种硬币的个数不限，且如果没有任何一种硬币组合能组成总金额时，返回-1。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：c[0]=1, c[1]=2, c[2]=5, k=12</span><br><span class="line">输出：3 </span><br><span class="line">解释：12 = 5 + 5 + 2</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：c[0]=5, k=7</span><br><span class="line">输出：-1</span><br><span class="line">解释：只有一种面值为5的硬币，怎么都无法凑出总价值为7的零钱。</span><br></pre></td></tr></tbody></table></figure></blockquote><p>题目中有一个醒目的提示词，那就是 “最少”。嗯，看起来这是一个求最值的问题，其实也好理解，如果题目不在这里设定这一条件，那么所求结果就不唯一了。</p><p>所以，这是一个求最值的问题。那么求最值的核心问题是什么呢？嗯，无非就是<strong>穷举</strong>，显然，就是把所有可能的凑硬币方法都穷举出来，然后找找看最少需要多少枚硬币，那么最少的凑法，就是这道题目的答案。</p><p>在面试中，一般来说穷举从来都不是一个好方法。除非你要的结果就是所有的不同组合，而不是一个最值。但即便是求所有的不同组合，在计算的过程中也仍然会出现重复计算的问题，我们将这种现象称之为<strong>重叠子问题</strong> 。</p><p>这个关键概念是动态规划当中的一个重要概念。但现在你只需要知道所谓重叠子问题就是：我们在罗列所有可能答案的过程中，可能存在重复计算的情况。</p><h1 id="贪心算法">贪心算法</h1><p>所谓贪心算法，就是指它的每一步计算作出的都是在当前看起来最好的选择，也就是说它所作出的选择只是在某种意义上的局部最优选择，并不从整体最优考虑。这两种选择的思路称作<strong>局部最优解</strong> 和 <strong>整体最优解</strong>。</p><p>因此，我们可以得到贪心算法的基本思路：</p><ol type="1"><li>根据问题来建立数学模型，一般面试题会定义一个简单模型；</li><li>把待求解问题划分成若干个子问题，对每个子问题进行求解，得到子问题的局部最优解；</li><li>把子问题的局部最优解进行合并，得到最后基于局部最优解的一个解，即原问题的答案。</li></ol><hr><p>回到硬币找零的问题，尝试用贪心算法解决问题：从最大的面值开始兑换，最后得出的硬币总数很有可能就是最少的。</p><p>使用一个例子试一试：我们从 c [0]=5, c [1]=3 且 k=11的情况下寻求最少硬币数。按照 “贪心原则”，我们先挑选面值最大的，即为 5 的硬币放入钱包。接着，还有 6 元待解（即 11-5= 6）。这时，我们再次 “贪心”，放入 5 元面值的硬币。</p><blockquote><p>Java 实现</p></blockquote><blockquote><p><code>AbstractCoinChange</code>：因为我们会有多个测试的实现，所以我们使用一个抽象类定义测试的入口，方便我们随时测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter(AccessLevel.PROTECTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCoinChange</span> {</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NO_RESULT_CODE</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 面值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] parValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractCoinChange</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span>[] parValue)</span> {</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="comment">// 确保数组可以从大到小排序</span></span><br><span class="line">        <span class="built_in">this</span>.parValue = Arrays.stream(parValue)</span><br><span class="line">                .boxed()</span><br><span class="line">                .sorted(Comparator.comparing(Integer::intValue).reversed())</span><br><span class="line">                .mapToInt(Integer::intValue)</span><br><span class="line">                .toArray();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体算法实现，返回 -1 表示没有结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> <span class="keyword">extends</span> <span class="title class_">AbstractCoinChange</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo01</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span>[] parValue)</span> {</span><br><span class="line">        <span class="built_in">super</span>(total, parValue);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> getTotal();</span><br><span class="line">        <span class="type">int</span>[] parValue = getParValue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : parValue) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">currCount</span> <span class="operator">=</span> total / value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> total - value * currCount;</span><br><span class="line">            result += currCount;</span><br><span class="line">            <span class="keyword">if</span> (rest == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            }</span><br><span class="line">            total = rest;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NO_RESULT_CODE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码就是简单地从最大的面值开始尝试，每次都会把当前面值的硬币尽量用光，然后才会尝试下一种面值的货币。</p><p>但是，有没有发现一个问题？上面的例子中，最后剩余 1 块钱，但是我们可以轻易地知道<span class="math inline">\(11 = 5 + 3 +3\)</span>，所以现在是有问题的。</p><p>我们将第二次放入的 5 元硬币取出，放入面值是 3 元的硬币，就会发现得到的结果是符合要求的，所以我们需要对贪心做改进，使用回溯来解决<code>Demo1</code> 过于贪心的问题</p><blockquote><p>Java 实现</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> <span class="keyword">extends</span> <span class="title class_">AbstractCoinChange</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo02</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span>[] parValue)</span> {</span><br><span class="line">        <span class="built_in">super</span>(total, parValue);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">minCount</span> <span class="operator">=</span> getMinCount(getTotal(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> minCount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMinCount</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span> parValueIndex)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">parValueLength</span> <span class="operator">=</span> getParValue().length;</span><br><span class="line">        <span class="keyword">if</span> (parValueLength == parValueIndex) {</span><br><span class="line">            <span class="keyword">return</span> NO_RESULT_CODE;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">currCoinValue</span> <span class="operator">=</span> getParValue()[parValueIndex];</span><br><span class="line">        <span class="type">int</span> <span class="variable">currCoinValueMaxCount</span> <span class="operator">=</span> total / currCoinValue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> currCoinValueMaxCount; count &gt;= <span class="number">0</span>; count--) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> total - currCoinValue * count;</span><br><span class="line">            <span class="comment">// 如果余额为 0，说明组合完毕了，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (rest == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 使用剩余的面额尝试组合</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">restCount</span> <span class="operator">=</span> getMinCount(rest, parValueIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果没有返回 NO_RESULT_CODE，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (restCount != NO_RESULT_CODE) {</span><br><span class="line">                <span class="keyword">return</span> count + restCount;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> NO_RESULT_CODE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过添加回溯，我们得到了符合题目要求的解法。</p><h1 id="贪心算法的局限性">贪心算法的局限性</h1><p>由于贪心算法是为了获取局部最优解，所以我们遇到了第一个解法的问题，局部最优没办法获取到结果。但是，局部最优这个思路是对的，整体最优就是多个局部最优的组合！</p><p>贪心的思路就是我们最优化求解的根本思想，所有的方法只不过是针对贪心思路的改进和优化。回溯解决的是正确性问题，而动态规划则是解决时间复杂度的问题。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;任何算法都有它的局限性，贪心算法也如此&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="动态规划" scheme="http://ann-zhgy.github.io/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
    <category term="贪心算法" scheme="http://ann-zhgy.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动归 ——（一）动态规划学习方法</title>
    <link href="http://ann-zhgy.github.io/2023/03/91e3fecf.html"/>
    <id>http://ann-zhgy.github.io/2023/03/91e3fecf.html</id>
    <published>2023-03-16T03:02:07.000Z</published>
    <updated>2023-11-15T06:22:06.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立扎实的基础知识体系">1、建立扎实的基础知识体系</h1><ol type="1"><li><p>先掌握基础的数据结构和算法，再来谈动态规划</p><blockquote><p>动态规划不仅名字听起来十分高级，它也的确是一种高级的解决问题的思想。为了更好地理解这个思想，掌握基础数据结构就显得尤为重要了，比如高维数组这样的数据结构，就经常出现在动态规划解法当中。其次是算法，像是递归、搜索和迭代这些常见的算法，都会作为工具在动态规划解法中使用。</p></blockquote></li></ol><span id="more"></span><ol start="2" type="1"><li><p>锻炼编码能力</p><blockquote><p>比如：是否该给循环添加等号？</p><ol type="1"><li>加等号？<code>for (int i = 0; i &lt;= MAX_COUNT; i++) { ... }</code></li><li>不加等号？<code>for (int i = 0; i &lt; MAX_COUNT; i++) { ... }</code></li><li>换个方法？<code>for (int i = 0; i &lt; MAX_COUNT + 1; i++) { ... }</code></li></ol><p>在练习的过程中一定要<strong>注重细节！</strong></p></blockquote></li></ol><h1 id="透彻理解动态规划基本方法论">2、透彻理解动态规划基本方法论</h1><ol type="1"><li>动态规划是一种思想，是一种高级方法。相比较而言，算法是一种经验总结和套路，是很容易落实到实践上的，但是思想是一种指导，<strong>指导我们怎么解决问题</strong>，所以这个东西是比较难落实到实践上来的</li><li>我们必须找一些规律来指导我们解决动态规划的问题。比如：寻找子问题、递归求解、重叠子问题与无后效性、状态存储。</li><li>在理解这些概念及其背后的深意之后，我们需要对其进行归纳总结。目的在于：你可以拥有一个清晰的判断标准：<strong>哪些问题应该使用动态规划来解，而哪些不应该或不能使用动态规划来解。</strong>避免盲目地使用动态规划来解题，弄清楚这个问题后，我们才能有的放矢地解决算法难题。</li></ol><h1 id="掌握经典问题总结解题思路">3、掌握经典问题，总结解题思路</h1><ul><li>掌握经典的动态规划问题特别重要，因为很多问题都是从这些经典问题延伸出来的</li></ul><h1 id="及时总结举一反三">4、及时总结，举一反三</h1><p>我们常说人工智能是人工智障，这么说并不过分，因为计算机真的很笨，它唯一能解决的问题就是穷举，穷举所有可能性。</p><p>动态规划的思想是从一系列算法中演进而来的。贪心算法是求解整体最优的真正思路源头，我们从那里开始，考虑穷举的问题，最终通过优化形成了一个比较完美的总结。而这个总结，正是动态规划思想。</p><p>所以你看，即便是高级如动态规划这样的思想，也是通过不断的总结而得到的。而经过我们前面这一系列的总结，便形成了下面这幅脑图，你可以通过这幅图对学习动态规划有一个全面的了解。</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1678937170805" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1678937170805.png" style="width: 100%;"></p></div>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;建立扎实的基础知识体系&quot;&gt;1、建立扎实的基础知识体系&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;先掌握基础的数据结构和算法，再来谈动态规划&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划不仅名字听起来十分高级，它也的确是一种高级的解决问题的思想。为了更好地理解这个思想，掌握基础数据结构就显得尤为重要了，比如高维数组这样的数据结构，就经常出现在动态规划解法当中。其次是算法，像是递归、搜索和迭代这些常见的算法，都会作为工具在动态规划解法中使用。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="动态规划" scheme="http://ann-zhgy.github.io/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
    <category term="动态规划学习方法" scheme="http://ann-zhgy.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java12～17 新特</title>
    <link href="http://ann-zhgy.github.io/2023/03/ced4de58.html"/>
    <id>http://ann-zhgy.github.io/2023/03/ced4de58.html</id>
    <published>2023-03-07T09:49:41.000Z</published>
    <updated>2023-11-15T06:22:06.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ps:Java 的新特性有一个预览版本，预览版本的新特性会在两个版本后更新到正式版，编译执行代码预览版本的特性的Java 文件需要添加 <code>--enable-preview</code> 参数</p><p>本篇所有内容摘自：<a href="https://pdai.tech/md/java/java8up/java12.html">https://pdai.tech/md/java/java8up/java12.html</a></p></blockquote><h1 id="java12">Java12</h1><h2 id="新的-switch-语句支持preview">新的 switch语句支持（preview）</h2><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputSeasonByMonth1</span><span class="params">(<span class="type">int</span> month)</span> {</span><br><span class="line">    <span class="keyword">switch</span> (month) {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"spring"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>:</span><br><span class="line">            System.out.println(<span class="string">"summer"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>:</span><br><span class="line">            System.out.println(<span class="string">"autumn"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">"winter"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"wrong"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputSeasonByMonth2</span><span class="params">(<span class="type">int</span> month)</span> {</span><br><span class="line">    <span class="keyword">switch</span> (month) {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; System.out.println(<span class="string">"spring"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> -&gt; System.out.println(<span class="string">"summer"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> -&gt; System.out.println(<span class="string">"autumn"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span> -&gt; System.out.println(<span class="string">"winter"</span>);</span><br><span class="line">        <span class="keyword">default</span> -&gt; System.out.println(<span class="string">"wrong"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>case 项支持合并在一起</li><li> case 的执行语句支持使用 lambda 的形式</li></ul><h2 id="shenandoah-低暂停时间垃圾回收器实验">Shenandoah低暂停时间垃圾回收器（实验）</h2><blockquote><p>JDK 12 引入的回收算法（实验阶段），该算法通过与正在运行的 Java线程同时进行疏散工作来减少 GC 暂停时间。Shenandoah的暂停时间与堆大小无关，无论堆栈是 200 MB 还是 200GB，都具有相同的一致暂停时间。</p><p>ps: Shenandoah 只存在于 OpenJDK 中，可以使用<code>-XX:+UseShenandoahGC</code> 命令行参数打开</p></blockquote><p><strong>Shenandoah 适用于高吞吐和大内存场景，不适合高实时性场景</strong>。Shenandoah 算法设计目标主要是响应性和一致可控的短暂停顿，对于垃圾回收生命周期中安全点停顿（TTSP) 和内存增长监控的时间开销并无帮助。</p><p>Shenandoah 算法为每个 Java 对象添加了一个间接指针，使得 GC 线程能够在 Java 线程运行时压缩堆。标记和压缩是同时执行的，因此我们只需要暂停 Java 线程在一致可控的时间内扫描线程堆栈以查找和更新对象图的根。</p><h1 id="java13">Java13</h1><h2 id="switch-支持返回结果preview">switch 支持返回结果（preview）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">outputSeasonByMonth1</span><span class="params">(<span class="type">int</span> month)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">switch</span> (month) {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">"spring"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> -&gt; <span class="string">"summer"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> -&gt; <span class="string">"autumn"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="string">"winter"</span>;</span><br><span class="line">        <span class="keyword">default</span> -&gt; <span class="string">"wrong"</span>;</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">outputSeasonByMonth2</span><span class="params">(<span class="type">int</span> month)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">switch</span> (month) {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">"spring"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">"summer"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">"autumn"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">"winter"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">"wrong"</span>;</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>上述两种 <code>switch</code> 的写法都不需要添加 <code>break</code>关键字来中断 <code>case</code>，所以也不会出现忘写 break 而出现 switch穿透的问题</li><li>如果是使用 case 后面添加代码块的方式，需要使用 <code>yield</code>关键字返回当前 case 块需要返回的数据<ul><li>ps：<code>yield</code>：产出、提供 的意思</li></ul></li></ul><h2 id="文本块preview">文本块（preview）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">textBlock</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">"""</span></span><br><span class="line"><span class="string">            床前明月光，</span></span><br><span class="line"><span class="string">            疑是地上霜。</span></span><br><span class="line"><span class="string">            举头望明月，</span></span><br><span class="line"><span class="string">            低头思故乡。</span></span><br><span class="line"><span class="string">            """</span>;</span><br><span class="line">    System.out.println(text);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>文本块可以省去我们手动添加 <code>\n</code>和拼接字符串的烦恼，可以联系 js 中使用 `` 包裹的字符串，除了不能使用<code>${}</code> 来直接替换变量，其他的也差不多</li></ul><h1 id="java14">Java14</h1><h2 id="switch-特性提升为正式版">switch 特性提升为正式版</h2><p>switch 表达式的新特性使得 switch语句在编码方式上简化不少，但是同时还是需要注意：</p><ul><li>需要保持与之前 switch 语句同样的 case 分支情况。</li><li>switch 表达式中不再需要显式地使用 return、break 或者 continue来跳出当前分支。</li></ul><h2 id="npe-提示增强可以提示到是哪个变量引起的-npe">NPE提示增强，可以提示到是哪个变量引起的 NPE</h2><p>使用 <code>-XX:+ShowCodeDetailsInExceptionMessages</code> 开启</p><h2 id="instanceof-模式匹配语法增强preview"><code>instanceof</code>模式匹配语法增强（preview）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">instanceOfDemo</span><span class="params">(Object obj)</span> {</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable serial) {</span><br><span class="line">        System.out.println(<span class="string">"is serializable"</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str &amp;&amp; !str.isBlank()) {</span><br><span class="line">        System.out.println(<span class="string">"is String"</span>);</span><br><span class="line">        <span class="keyword">if</span> (str.contains(<span class="string">"aab"</span>)) {</span><br><span class="line">            System.out.println(<span class="string">"str contains aab"</span>);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> List&lt;?&gt; list) {</span><br><span class="line">        System.out.println(<span class="string">"is List"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>instanceof</code>后面可以直接声明的变量，声明的变量是判断的类型，作用范围是之后的<code>if</code> 块</li><li>在 <code>&amp;&amp;</code> 运算符中，<code>&amp;&amp;</code>前面使用 <code>instanceof</code> 声明的变量可以在<code>&amp;&amp;</code>之后使用，即：变量的作用范围延长了，但是这种延长不适用于 <code>||</code>运算符，因为 <code>||</code>运算符即使前面没有匹配成功，也会执行后面的判断，此时使用会产生问题</li></ul><h2 id="record-类型preview"><code>Record</code> 类型（preview）</h2><blockquote><p>Record类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record这一特性主要用在特定领域的类上；与枚举类型一样，Record类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name)</span> {</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>record 类型的实体反编译后会继承于 <code>java.lang.Record</code>类【与枚举类型类似】，且拥有部分特征：</p><ul><li>有且仅有一个构造方法</li><li>拥有获取成员属性的方法：<code>name()</code></li><li>重写了 <code>hashcode()</code> 和 <code>equals()</code></li><li>重写了 <code>toString()</code></li><li>类对象和属性均被 <code>final</code>修饰，表示类不可被继承，属性不可被再次赋值</li></ul><p>同时，<code>Class</code> 中也引入了新的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RecordComponent[] getRecordComponents() <span class="comment">// 返回类中 Recode 类型的字段</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isRecord</span><span class="params">()</span> <span class="comment">// 判断当前类是否是 Record 类型</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文本块增强preview">文本块增强（preview）</h2><p>引入了 <code>\</code> 和 <code>\s</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">textBlockEnhance</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"""</span></span><br><span class="line"><span class="string">            床前明月光，\</span></span><br><span class="line"><span class="string">            疑是地上霜。\</span></span><br><span class="line"><span class="string">            举头望明月，\</span></span><br><span class="line"><span class="string">            低头思故乡。</span></span><br><span class="line"><span class="string">            """</span>;</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">"""</span></span><br><span class="line"><span class="string">            床前明月光，\s</span></span><br><span class="line"><span class="string">            疑是地上霜。 \s</span></span><br><span class="line"><span class="string">            举头望明月， </span></span><br><span class="line"><span class="string">            低头思故乡。</span></span><br><span class="line"><span class="string">            """</span>;</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>\</code> 与各种配置文件中的用法一致，表示当前行没有结束</li><li><code>\s</code> 表示一行末尾的空格，因为文本块会删掉一行末尾的<code>\r\n</code>，同时也会删除末尾的空格<ul><li>注意：代码第 12 行的空格并不会在控制台打印出来</li></ul></li></ul><hr><blockquote><p>接下来的特性对于使用 <code>Java</code> 进行开发的开发人员关系不大</p></blockquote><h2 id="打包工具孵化版">打包工具（孵化版）</h2><p>用于将 Java 项目打包成可在 windows、macos、linux系统直接运行的程序包</p><p>在 <strong>Java13</strong> 发布前的最后一刻被从外围移除的打包工具 jpackage 终于可以在 Java14 中使用了。但是要注意，它只在 Incubator 版本中提供。</p><p>这个打包工具应该可以让开发人员创建自主的 Java 应用程序，它以 JavaFXjavapackager 这个打包工具为基础。它的主要特点有如下三个：</p><ul><li>支持本地打包格式，为用户提供自然的安装体验；</li><li>打包时可以指定启动参数；</li><li>通过命令行或使用 ToolProvider API 的程序来启动。</li></ul><h2 id="某个组合垃圾回收器被弃用">某个组合垃圾回收器被弃用</h2><p>Java 14 打算弃用 ParallelScavenge + SerialOld 垃圾收集器组合。</p><p>支持这一改变的 JEP366 清楚地表明，他们的目的不是要删除掉这个组合，而是要弃用它。</p><p>弃用这种算法组合的原因是：它很少被使用，同时需要大量的维护工作。</p><h1 id="java15">Java15</h1><h2 id="密封的类和接口preview">密封的类和接口（preview）</h2><p>密封的类和接口用于显示那些类可以继承当前类，限制了类的层次结构，是一个很实用的特性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加sealed修饰符，permits后面跟上只能被继承的子类名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">permits</span> Teacher, Worker, Student{ } <span class="comment">//人</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 子类可以被修饰为 final</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> { }<span class="comment">//教师</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它</span></span><br><span class="line"><span class="keyword">non-sealed</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Person</span> { }  <span class="comment">//工人</span></span><br><span class="line"><span class="comment">// 任何类都可以继承Worker</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnyClass</span> <span class="keyword">extends</span> <span class="title class_">Worker</span>{}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//子类可以被修饰为 sealed,同上</span></span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> <span class="keyword">permits</span> MiddleSchoolStudent,GraduateStudent{ } <span class="comment">//学生</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MiddleSchoolStudent</span> <span class="keyword">extends</span> <span class="title class_">Student</span> { }  <span class="comment">//中学生</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">GraduateStudent</span> <span class="keyword">extends</span> <span class="title class_">Student</span> { }  <span class="comment">//研究生</span></span><br></pre></td></tr></tbody></table></figure><h1 id="java16">Java16</h1><h2 id="instanceof-模式匹配增强提升为正式版">instanceof模式匹配增强提升为正式版</h2><h2 id="record-类型提升为正式版">Record 类型提升为正式版</h2><h2 id="向量api孵化版">向量 API（孵化版）</h2><blockquote><p>向量 API 存在于 <code>jdk.incubator.vector</code> 包中，属于<code>jdk.incubator.vector</code>模块。向量计算也成为矢量计算，指的是充分运用多核 CPU 的特性，使多个计算<strong>并行</strong>进行，同时计算</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义256bit的向量浮点运算</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> VectorSpecies&lt;Float&gt; SPECIES = FloatVector.SPECIES_256;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">vectorComputation</span><span class="params">(<span class="type">float</span>[] a, <span class="type">float</span>[] b, <span class="type">float</span>[] c)</span> {</span><br><span class="line">    <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">upperBound</span> <span class="operator">=</span> SPECIES.loopBound(a.length);</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; upperBound; i += SPECIES.length()) {</span><br><span class="line">        <span class="type">var</span> <span class="variable">va</span> <span class="operator">=</span> FloatVector.fromArray(SPECIES, a, i);</span><br><span class="line">        <span class="type">var</span> <span class="variable">vb</span> <span class="operator">=</span> FloatVector.fromArray(SPECIES, b, i);</span><br><span class="line">        <span class="type">var</span> <span class="variable">vc</span> <span class="operator">=</span> va.mul(va).</span><br><span class="line">                add(vb.mul(vb)).</span><br><span class="line">                neg();</span><br><span class="line">        vc.intoArray(c, i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; a.length; i++) {</span><br><span class="line">        c[i] = (a[i] * a[i] + b[i] * b[i]) * -<span class="number">1.0f</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="java17">Java17</h1><h2 id="密封类提升为正式版">密封类提升为正式版</h2><h2 id="伪随机数生成器重构及增强">伪随机数生成器重构及增强</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomGenerator</span> <span class="variable">g</span> <span class="operator">=</span> RandomGenerator.of(<span class="string">"L64X128MixRandom"</span>);</span><br></pre></td></tr></tbody></table></figure><p>关于参数，建议看 javadoc 或注释</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1678267319255" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1678267319255.png" style="width: 100%;"></p></div><ul><li>这一大坨就是可选的参数</li></ul><h1 id="下一次更新将是-java23-发布时">下一次更新将是 Java23 发布时</h1><p>Java19 开放了预览版的虚拟线程，结构化并发也已进入孵化阶段，推测这两块新的 API将是很大的亮点</p><p>关于 Java 各个版本的新特性信息，可以关注 <a href="https://openjdk.org/projects/jdk/20/">https://openjdk.org/projects/jdk/20/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ps:
Java 的新特性有一个预览版本，预览版本的新特性会在两个版本后更新到正式版，编译执行代码预览版本的特性的
Java 文件需要添加 &lt;code&gt;--enable-preview&lt;/code&gt; 参数&lt;/p&gt;
&lt;p&gt;本篇所有内容摘自：&lt;a href=&quot;https://pdai.tech/md/java/java8up/java12.html&quot;&gt;https://pdai.tech/md/java/java8up/java12.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;java12&quot;&gt;Java12&lt;/h1&gt;
&lt;h2 id=&quot;新的-switch-语句支持preview&quot;&gt;新的 switch
语句支持（preview）&lt;/h2&gt;</summary>
    
    
    
    <category term="Java新特性" scheme="http://ann-zhgy.github.io/categories/Java%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="Java12～17新特性" scheme="http://ann-zhgy.github.io/tags/Java12%EF%BD%9E17%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java10、11 新特</title>
    <link href="http://ann-zhgy.github.io/2023/03/ca210e65.html"/>
    <id>http://ann-zhgy.github.io/2023/03/ca210e65.html</id>
    <published>2023-03-07T09:06:43.000Z</published>
    <updated>2023-11-15T06:22:06.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java10">Java10</h1><h2 id="局部变量类型推断">局部变量类型推断</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"string"</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10010</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>此特性仅用于局部变量</li></ul><h1 id="java11">Java11</h1><h2 id="支持通过-java-命令直接运行">支持通过 <code>java</code>命令直接运行</h2><p>在之前的版本中，运行 <code>Java</code> 文件需要先编译，之后再运行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>在 Java11 中，可以通过 <code>java</code> 命令直接运行 Java 文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld.java</span><br></pre></td></tr></tbody></table></figure><h2 id="string-中新增的方法">String 中新增的方法</h2><blockquote><p>通过代码及运行结果直接看吧，还包括 <code>line()</code>等方法，如果需要，建议自行查阅 API 文档</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">'\u2000'</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> c + <span class="string">"abc"</span> + c;</span><br><span class="line">    System.out.printf(<span class="string">"[%s]\n"</span>, str.trim());</span><br><span class="line">    System.out.printf(<span class="string">"[%s]\n"</span>, str.strip());</span><br><span class="line">    System.out.printf(<span class="string">"[%s]\n"</span>, str.stripLeading());</span><br><span class="line">    System.out.printf(<span class="string">"[%s]\n"</span>, str.stripTrailing());</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">" "</span>;</span><br><span class="line">    System.out.println(name.isBlank());</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> <span class="string">"ann-zhgy"</span>;</span><br><span class="line">    System.out.println(desc.repeat(<span class="number">3</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1678181355478" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1678181355478.png" style="width: 100%;"></p></div><h2 id="var-可以修饰-lambda-局部变量">var 可以修饰 Lambda 局部变量</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Function</span> <span class="variable">functionInterface</span> <span class="operator">=</span> (<span class="keyword">var</span> a) -&gt; a == <span class="literal">null</span> ? Optional.empty() : a;</span><br></pre></td></tr></tbody></table></figure><ul><li>感觉很鸡肋</li></ul><h2 id="集合转对应类型数组">集合转对应类型数组</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; sampleList = Arrays.asList(<span class="string">"张三"</span>, <span class="string">"java 11"</span>);</span><br><span class="line"><span class="comment">// array = {"张三", "java 11"};</span></span><br><span class="line"><span class="comment">// 11 之前最简单的写法 </span></span><br><span class="line"><span class="comment">// String[] array = sampleList.toArray(new String[0]);</span></span><br><span class="line">String[] array = sampleList.toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="java11-最值得关注的特性zgc">Java11 最值得关注的特性：ZGC</h2><blockquote><p>ZGC 是 Java11 中最值得关注的特性，没有之一</p></blockquote><p>关于 ZGC 的详细介绍，建议查看 <a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/JVM%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%2032%20%E8%AE%B2%EF%BC%88%E5%AE%8C%EF%BC%89/15%20Java11%20ZGC%20%E5%92%8C%20Java12%20Shenandoah%20%E4%BB%8B%E7%BB%8D%EF%BC%9A%E8%8B%9F%E6%97%A5%E6%96%B0%E3%80%81%E6%97%A5%E6%97%A5%E6%96%B0%E3%80%81%E5%8F%88%E6%97%A5%E6%96%B0.md">Java11ZGC 和 Java12 Shenandoah 介绍：苟日新、日日新、又日新</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;java10&quot;&gt;Java10&lt;/h1&gt;
&lt;h2 id=&quot;局部变量类型推断&quot;&gt;局部变量类型推断&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;此特性仅用于局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;java11&quot;&gt;Java11&lt;/h1&gt;
&lt;h2 id=&quot;支持通过-java-命令直接运行&quot;&gt;支持通过 &lt;code&gt;java&lt;/code&gt;
命令直接运行&lt;/h2&gt;
&lt;p&gt;在之前的版本中，运行 &lt;code&gt;Java&lt;/code&gt; 文件需要先编译，之后再运行&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javac HelloWorld.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java HelloWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java新特性" scheme="http://ann-zhgy.github.io/categories/Java%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="Java10、11新特性" scheme="http://ann-zhgy.github.io/tags/Java10%E3%80%8111%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java 项目开发相关的 tips</title>
    <link href="http://ann-zhgy.github.io/2023/03/8a1412e9.html"/>
    <id>http://ann-zhgy.github.io/2023/03/8a1412e9.html</id>
    <published>2023-03-02T08:40:07.000Z</published>
    <updated>2023-11-15T06:22:06.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol type="1"><li>开写之前，建议先阅读一下阿里孤尽【大漠孤烟直，白日依山尽】老师出品的 Java 代码开发规范：<a href="https://edu.aliyun.com/article/103">https://edu.aliyun.com/article/103</a></li><li> 本篇基于极客时间郑晔老师的课程《代码之丑》</li><li>本片提出的一些建议并不是仅适用于 Java</li></ol></blockquote><p><strong>代码是给人看的，所以需要注意阅读性</strong></p><span id="more"></span><h2 id="变量命名">1、变量命名</h2><ul><li>命名要能够描述出这段代码在做的事情，一个好的名字应该描述意图，而非细节！</li><li>用技术术语命名是一个很不好的习惯，比如：xxxMap、xxxList、xxxSet。技术代码的出现代表着它缺少一个应有的模型</li><li>编写可维护的代码要使用业务语言，建立团队的词汇表</li><li>对于英语，最低限度的要求是写出来的代码像是在用英语表达<ul><li>类名是一个名词，表示一类对象</li><li>方法名是一个动词或动宾短语，表示一个动作，一个行为</li></ul></li></ul><h2 id="重复代码">2、重复代码</h2><ul><li>大量的重复代码，可以通过 idea 看到警告的重复的代码，最直接的 diss 点就是：封装、继承、多态中的封装是啥。在编码时，要注意一定不要复制粘贴</li><li>关于 if-else：如果 <code>if</code> 和 <code>else</code>中的代码长得比较像，这点代码多半是有共通的逻辑的，需要改</li><li><strong>不要重复自己，不要复制粘贴</strong></li></ul><h2 id="长函数">3、长函数</h2><ul><li>在阿里的 Java 代码规约中，会认为一个方法超过 80行就已经算是长函数了</li><li><strong>一个好的程序员面对代码库时要有不同尺度的观察能力，看设计时，要能够高屋建瓴，看代码时，要能细致入微</strong>。</li><li>长函数往往还隐含着变量命名问题：类似含义的变量在同一方法 (代码块) 中是不可以重复声明的，抽取出方法之后，基本上不会有这个问题</li><li>写出长函数的常见原因：<ul><li>以性能为由</li><li>平铺直叙</li><li>每次迭代加一点</li></ul></li></ul><h2 id="大类">4、大类</h2><ul><li>大类的产生：<ul><li>类的职责不单一：这个类做的事情很多，但是实际上这些事情可以是被细分的</li><li>字段未分组：</li></ul></li><li><strong>所谓的将大类拆解成小类，本质上在做的工作是一个设计工作</strong>。</li></ul><h2 id="长参数列表">5、长参数列表</h2><ul><li>将参数封装为对象，之后再添加参数时直接在对象里面添加即可<ul><li><strong>一个模型的封装应该是以行为为基础的</strong>。所以，在封装对象时也不能把参数一股脑的放到一个对象里面</li><li>动静分离：不变的变量可以设置为全局变量</li></ul></li><li>去除标记：对于设置状态及根据状态执行不同的处理逻辑的代码，可以分别抽成单独的方法</li></ul><h2 id="滥用控制语句">6、滥用控制语句</h2><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1677756167092" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1677756167092.png" style="width: 100%;"></p></div><blockquote><p>这传说中的招法，他的名字叫做 —— かめはめ波 (ka mi ha mi ha)！</p></blockquote><p>多层的嵌套关系其实是非常影响阅读的，我个人可能读到第四层或者第五层就完全读不下去了。对于这种代码的改进，比较出名的就是 “卫语句 " 这种写法。</p><p>在开发时或许我们可以先想异常情况，之后写正常的处理逻辑。</p><h2 id="过长的调用链">7、过长的调用链</h2><ul><li>过长的调用链也是一种坏味道，最直接的方式就是将调用链封装为一个方法，隐藏中间的委托关系</li></ul><h2 id="基本类型偏执">8、基本类型偏执</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> highQuality, <span class="keyword">final</span> <span class="type">int</span> chapterSequence)</span> {</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>通过方法名，我们可以明确知道这个方法是返回一个表示价格的数据，但是使用的类型却是double。double 表示的范围有点大，价格没有负数的，或者价格的精度只有 2 位……</li><li> 改进方案：建立一个关于价格的模型 (类)<ul><li><p>```java public class Price { private double price;</p><pre><code>public Price(final double price) {    if (price &lt;= 0) {        throw new IllegalArgumentException("Price should be positive");    }    this.price = price;}public double getDisplayPrice() {    BigDecimal decimal = new BigDecimal(this.price)；    return decimal.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();}</code></pre><p>} </p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> <span class="strong">**封装之所以有难度，主要在于它是一个构建模型的过程**</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 9、移除设值函数</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 对于读取数据来说，修改是一个更加危险的操作，而对于修改数据来说，更可怕的是不可控的变化</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 可以看一些 Java 中已经存在的一些方法声明，我们可以发现它其实是基于不变量返回的新的变量，所以这类问题的一个解决方案就是创建不变类</span><br><span class="line"><span class="bullet">  *</span> <span class="code">```java</span></span><br><span class="line"><span class="code">    String replace(char oldChar, char newChar)</span></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>```java LocalDateTime twoDaysLater = now.plusDays(2);</p><figure class="highlight vbscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    饱受诟病的 Date 类在 Java8 修改之后，同样是基于原有的日期计算，返回计算结果，而不是修改原来的日期</span><br><span class="line">* 在项目中创建不变类是一件不太可能的事情，更实用的一个方案是：**区分类的性质**。</span><br><span class="line">  * 如果是实体对象就要限时数据的变化</span><br><span class="line">  * 如果是值对象就创建不变类</span><br><span class="line"></span><br><span class="line">## <span class="number">10</span>、变量声明与赋值分离</span><br><span class="line"></span><br><span class="line">先看一段代码</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">EpubStatus status = <span class="literal">null</span>;</span><br><span class="line">CreateEpubResponse <span class="built_in">response</span> = createEpub(<span class="built_in">request</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">response</span>.getCode() == <span class="number">201</span>) {</span><br><span class="line">    status = EpubStatus.CREATED;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    status = EpubStatus.TO_CREATE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li></ul></li><li>这段代码的问题在于第一行的赋值操作其实是没有意义的，如果第一行与真正赋值的操作隔了很远，这将极大的降低代码的可读性</li><li>所以，我们编程时要有一个基本原则：<strong>变量一次性完成初始化</strong> 。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">CreateEpubResponse</span> <span class="variable">response</span> <span class="operator">=</span> createEpub(request);</span><br><span class="line"><span class="keyword">final</span> <span class="type">EpubStatus</span> <span class="variable">status</span> <span class="operator">=</span> toEpubStatus(response);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> EpubStatus <span class="title function_">toEpubStatus</span><span class="params">(<span class="keyword">final</span> CreateEpubResponse response)</span> {</span><br><span class="line">    <span class="keyword">if</span> (response.getCode() == <span class="number">201</span>) {</span><br><span class="line">     <span class="keyword">return</span> EpubStatus.CREATED;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> EpubStatus.TO_CREATE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>从改进的代码中我们还看到了<code>final</code>，基于尽可能使用不变的量的考虑：<strong>在能够使用<code>final</code> 的地方尽量使用<code>final</code>，限制变量再赋值操作</strong></li></ul><p>对于集合的初始化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">permissions</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">permissions.add(Permission.BOOK_READ);</span><br><span class="line">permissions.add(Permission.BOOK_WRITE);</span><br><span class="line">check.grantTo(Role.AUTHOR, permissions);</span><br></pre></td></tr></tbody></table></figure><ul><li>这段代码是一个简单的几何初始化的过程，但是在 <code>Java9</code>之后，这种写法就已经是一个很不好的写法了 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">permissions</span> <span class="operator">=</span> List.of(</span><br><span class="line">  Permission.BOOK_READ, </span><br><span class="line">  Permission.BOOK_WRITE</span><br><span class="line">);</span><br><span class="line">check.grantTo(Role.AUTHOR, permissions);</span><br></pre></td></tr></tbody></table></figure><ul><li>List.of返回的还是一个不支持增删改操作的集合类型，同样是<strong>尽量使用不可变的量</strong>这个规则</li><li>对比我们改造前后的代码，二者之间还有一个更关键的区别：前面的代码是命令式的代码，而后面的代码是声明式的代码。<ul><li>命令式的代码，就是告诉你 “怎么做” 的代码，就像改造前的代码，声明一个集合，然后添加一个元素，再添加一个元素。</li><li>声明式的代码，是告诉你 “做什么” 的代码，改造后就是，我要一个包含了这两个元素的集合。</li></ul></li><li><strong>用声明式的标准来看代码，是一个发现代码坏味道的重要参考</strong></li></ul><h2 id="依赖混乱你可能还没发现问题代码就已经无法挽救了">11、依赖混乱：你可能还没发现问题，代码就已经无法挽救了</h2><p>先看一段代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> NewBookResponse <span class="title function_">createBook</span><span class="params">(<span class="keyword">final</span> NewBookRequest request)</span> {</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.service.createBook(request);</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>上面的问题在于：属于 controller/resource 层的<code>NewBookRequest</code>实体进入了业务处理层，业务处理层应该有相对稳定的参数、返回结构等信息，这样才可以实现每一层的隔离</li></ul><p>最好的解决方案：</p><ol type="1"><li>每一层都有各自的参数，返回结果</li><li>面向接口编程</li></ol><h2 id="不一致的代码为什么你的代码总是被吐槽">12、不一致的代码：为什么你的代码总是被吐槽</h2><h3 id="命名的不一致">12.1 命名的不一致</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">DistributionChannel</span> {</span><br><span class="line">    WEBSITE</span><br><span class="line">    KINDLE_ONLY</span><br><span class="line">    ALL</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>如上代码所示，代表分发渠道包括网站（WEBSITE）、只在 Kindle（KINDLE_ONLY），还是全渠道（ALL）</p><blockquote><p>面对这段代码，我有些疑惑，于是我提了一个问题：</p><p>我：这里的 WEBSITE 和 KINDLE_ONLY 分别表示的是什么？ 同事：WEBSITE表示作品只会在我们自己的网站发布，KINDLE_ONLY 表示这部作品只会在 Kindle的电子书商店里上架。 我：二者是不是都表示只在单独一个渠道发布？同事：是啊！ 我：既然二者都有只在一个平台上架发布的含义，为什么不都叫XXX 或者 XXX_ONLY？ 同事：呃，你说得有道理。</p></blockquote></li><li><p>表示<strong>类似含义的代码应该有一致的名字</strong>，而<strong>一旦出现了不一致的名字，通常都表示不同的含义</strong></p></li></ul><h3 id="方案的不一致">12.2 方案的不一致</h3><p>比如两块代码中都用到了对于日期的操作，一个使用的 <code>Date</code>类，另一个是使用的 <code>LocalDateTime</code>类，在同一项目中，我们使用的方案应该是一致的</p><h3 id="代码中的不一致">12.3 代码中的不一致</h3><blockquote><p>我们再来看一段代码：</p><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> createBook(<span class="keyword">final</span> List</span><br></pre></td></tr></tbody></table></figure><p>这是一段在翻译引擎中创建作品的代码。首先，根据要处理的作品 ID获取其中已经审核通过的作品，然后，发送一个 HTTP请求在翻译引擎中创建出这个作品。</p><p>这么短的一段代码有什么问题吗？问题就在于这段代码中的不一致。你可能会想：“不一致？不一致体现在哪里呢？” 答案就是，这些代码不是一个层次的代码。</p><p>通过了解这段代码的背景，你可能已经看出一些端倪了。首先是获取审核通过的作品，这是一个业务动作，接下来的三行其实是在做一件事，也就是发送创建作品的请求。具体到代码上，这三行代码分别是创建请求的参数，根据参数创建请求，最后，再把请求发送出去。这三行代码合起来完成了一个发送创建作品请求这么一件事，而这件事才是一个完整的业务动作。</p><p>所以，我说这个函数里的代码并不在一个层次上，有的是业务动作，有的是业务动作的细节。理解了这一点，我们就可以把这些业务细节的代码提取到一个函数里：</p><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> createBook(<span class="keyword">final</span> List</span><br></pre></td></tr></tbody></table></figure><p>从结果上看，原来的函数（createBook）里面全都是业务动作，而提取出来的函数（createRemoteBook）则都是业务动作的细节，各自的语句都是在一个层次上了。</p></blockquote><ul><li>很多程序员纠结的技术问题，其实是一个软件设计问题，不要通过奇技淫巧去解决一个本来不应该被解决的问题。</li></ul><h2 id="落后的代码风格使用新的语言特性和程序库升级你的代码">13落后的代码风格：使用 “新” 的语言特性和程序库升级你的代码</h2><h2 id="写代码是一个值得一生精进的事情">14写代码是一个值得一生精进的事情♪</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;开写之前，建议先阅读一下阿里
孤尽【大漠孤烟直，白日依山尽】老师出品的 Java 代码开发规范：&lt;a href=&quot;https://edu.aliyun.com/article/103&quot;&gt;https://edu.aliyun.com/article/103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 本篇基于极客时间郑晔老师的课程《代码之丑》&lt;/li&gt;
&lt;li&gt;本片提出的一些建议并不是仅适用于 Java&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;代码是给人看的，所以需要注意阅读性&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="经验之谈" scheme="http://ann-zhgy.github.io/categories/%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
    
    
    <category term="Java开发规范" scheme="http://ann-zhgy.github.io/tags/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Java 扩展 ——Manifold 插件</title>
    <link href="http://ann-zhgy.github.io/2023/03/394b666a.html"/>
    <id>http://ann-zhgy.github.io/2023/03/394b666a.html</id>
    <published>2023-03-01T07:16:28.000Z</published>
    <updated>2023-11-15T06:22:06.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文指引：<a href="https://developer.aliyun.com/article/1135549">https://developer.aliyun.com/article/1135549</a></p></blockquote><h1 id="什么是扩展方法">什么是扩展方法</h1><p>扩展方法，就是能够向<strong>现有类型</strong>直接 “添加” 方法，而无需创建新的派生类型、重新编译或以其他方式修改现有类型。调用扩展方法的时候，与调用在类型中实际定义的方法相比没有明显的差异。</p><ul><li>所以，Java 其实是不支持扩展方法的</li></ul><h1 id="manifold-使用">Manifold 使用</h1><span id="more"></span><h2 id="准备条件">准备条件</h2><ol type="1"><li><p>在 IDEA 上安装 Manifold 插件</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1677656179082" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1677656179082.png" style="width: 100%;"></p></div></li><li><p>在项目 pom 的编译插件 <em>maven-compiler-plugin</em> 中加入<em>annotationProcessorPaths</em> ：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">manifold.version</span>&gt;</span>2023.1.3<span class="tag">&lt;/<span class="name">manifold.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>systems.manifold<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>manifold-ext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${manifold.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Add the -Xplugin:Manifold argument for the javac compiler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xplugin:Manifold no-bootstrap<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>systems.manifold<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>manifold-ext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${manifold.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果项目使用了 Lombok，需要把 Lombok 也加入annotationProcessorPaths</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${lombok.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>systems.manifold<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>manifold-ext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${manifold.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="编写扩展方法">编写扩展方法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.extensions.java.lang.String;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> manifold.ext.rt.api.Extension;</span><br><span class="line"><span class="keyword">import</span> manifold.ext.rt.api.This;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类型扩展</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ann-zhgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> StringExt.class 2023-02-24 15:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Extension</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringExt</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] split(<span class="meta">@This</span> String str, <span class="type">char</span> separator) {</span><br><span class="line">        <span class="keyword">return</span> StringUtils.split(str, separator);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>扩展方法类必须在 <code>extensions</code>包下，包名必须是要扩展的类的全路径名</li><li>扩展方法需要添加 <code>@Extension</code> 注解</li><li>普通方法的扩展方法需要持有要扩展的类对象，并且使用<code>@This</code> 注解标记 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.extensions.java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> manifold.ext.rt.api.Extension;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List扩展</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ann-zhgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> ListExt.class 2023-02-24 15:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Extension</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ListExt</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Extension</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">of</span><span class="params">(E elem)</span> {</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(elem);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Extension</span></span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">of</span><span class="params">(E ...elem)</span> {</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(Arrays.asList(elem));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>静态方法的扩展需要在方法上面添加 <code>@Extension</code> 注解</p><p>ps：<code>@SafeVarargs</code> 仅用来抑制 “堆污染 " 警告</p></li></ul><p><strong>数组扩展方法</strong>：可以参考 Manifold 自带的<code>manifold.ext.rt.extensions.manifold.rt.api.Array.ManArrayExt</code></p><h1 id="扩展方法需要谨慎添加">扩展方法需要谨慎添加</h1><p>扩展方法是极其通用的方法，所以必须谨慎添加！！！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文指引：&lt;a href=&quot;https://developer.aliyun.com/article/1135549&quot;&gt;https://developer.aliyun.com/article/1135549&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是扩展方法&quot;&gt;什么是扩展方法&lt;/h1&gt;
&lt;p&gt;扩展方法，就是能够向&lt;strong&gt;现有类型&lt;/strong&gt;直接 “添加” 方法，而无需创建新的派生类型、重新编译或以其他方式修改现有类型。调用扩展方法的时候，与调用在类型中实际定义的方法相比没有明显的差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所以，Java 其实是不支持扩展方法的&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;manifold-使用&quot;&gt;Manifold 使用&lt;/h1&gt;</summary>
    
    
    
    <category term="Java 插件" scheme="http://ann-zhgy.github.io/categories/Java-%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="Java 扩展方法" scheme="http://ann-zhgy.github.io/tags/Java-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
    
    <category term="Manifold" scheme="http://ann-zhgy.github.io/tags/Manifold/"/>
    
  </entry>
  
  <entry>
    <title>GibHub commit emoji 表情对照表（也可适用于 markdown 表情）</title>
    <link href="http://ann-zhgy.github.io/2023/02/d0090e46.html"/>
    <id>http://ann-zhgy.github.io/2023/02/d0090e46.html</id>
    <published>2023-02-14T06:12:47.000Z</published>
    <updated>2023-11-15T06:22:06.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考 <a href="https://github.com/liuchengxu/git-commit-emoji-cn" title="git commit emoji 使用指南">git commit emoji 使用指南</a>、<a href="https://github.com/zhouie/markdown-emoji" title="markdown-emoji">markdown-emoji</a></p></blockquote><span id="more"></span><h1 id="提交-emoji">提交 emoji</h1><table><colgroup><col style="width: 18%"><col style="width: 47%"><col style="width: 33%"></colgroup><thead><tr class="header"><th>emoji</th><th>emoji 代码</th><th> commit 说明</th></tr></thead><tbody><tr class="odd"><td>🎉</td><td><code>:tada:</code></td><td>初次提交</td></tr><tr class="even"><td>🆕</td><td><code>:new:</code></td><td>引入新功能</td></tr><tr class="odd"><td>🔖</td><td><code>:bookmark:</code></td><td>发行 / 版本标签</td></tr><tr class="even"><td>🐛</td><td><code>:bug:</code></td><td>修复 bug</td></tr><tr class="odd"><td>🚑</td><td><code>:ambulance:</code></td><td>重要补丁</td></tr><tr class="even"><td>🌐</td><td><code>:globe_with_meridians:</code></td><td>国际化与本地化</td></tr><tr class="odd"><td>💄</td><td><code>:lipstick:</code></td><td>更新 UI 和样式文件</td></tr><tr class="even"><td>🎬</td><td><code>:clapper:</code></td><td>更新演示 / 示例</td></tr><tr class="odd"><td>🚨</td><td><code>:rotating_light:</code></td><td>移除 linter 警告</td></tr><tr class="even"><td>🔧</td><td><code>:wrench:</code></td><td>修改配置文件</td></tr><tr class="odd"><td>➕</td><td><code>:heavy_plus_sign:</code></td><td>增加一个依赖</td></tr><tr class="even"><td>➖</td><td><code>:heavy_minus_sign:</code></td><td>减少一个依赖</td></tr><tr class="odd"><td>⬆️</td><td><code>:arrow_up:</code></td><td>升级依赖</td></tr><tr class="even"><td>⬇️</td><td><code>:arrow_down:</code></td><td>降级依赖</td></tr><tr class="odd"><td>⚡️<br>🐎</td><td><code>:zap:</code><br><code>:racehorse:</code></td><td>提升性能</td></tr><tr class="even"><td>📈</td><td><code>:chart_with_upwards_trend:</code></td><td>添加分析或跟踪代码</td></tr><tr class="odd"><td>🚀</td><td><code>:rocket:</code></td><td>部署功能</td></tr><tr class="even"><td>✅</td><td><code>:white_check_mark:</code></td><td>增加测试</td></tr><tr class="odd"><td>📝<br>📖</td><td><code>:memo:</code><br><code>:book:</code></td><td>撰写文档</td></tr><tr class="even"><td>🔨</td><td><code>:hammer:</code></td><td>重大重构</td></tr><tr class="odd"><td>🎨</td><td><code>:art:</code></td><td>改进代码结构 / 代码格式</td></tr><tr class="even"><td>🔥</td><td><code>:fire:</code></td><td>移除代码或文件</td></tr><tr class="odd"><td>✏️</td><td><code>:pencil2:</code></td><td>修复 typo</td></tr><tr class="even"><td>🚧</td><td><code>:construction:</code></td><td>工作进行中</td></tr><tr class="odd"><td>🗑</td><td><code>:wastebasket:</code></td><td>废弃或删除</td></tr><tr class="even"><td>♿️</td><td><code>:wheelchair:</code></td><td>可访问性</td></tr><tr class="odd"><td>👷</td><td><code>:construction_worker:</code></td><td>添加 CI 构建系统</td></tr><tr class="even"><td>💚</td><td><code>:green_heart:</code></td><td>修复 CI 构建问题</td></tr><tr class="odd"><td>🔒</td><td><code>:lock:</code></td><td>修复安全问题</td></tr><tr class="even"><td>🐳</td><td><code>:whale:</code></td><td>Docker 相关工作</td></tr><tr class="odd"><td>🍎</td><td><code>:apple:</code></td><td>修复 macOS 下的问题</td></tr><tr class="even"><td>🐧</td><td><code>:penguin:</code></td><td>修复 Linux 下的问题</td></tr><tr class="odd"><td>🏁</td><td><code>:checkered_flag:</code></td><td>修复 Windows&nbsp;下的问题</td></tr><tr class="even"><td>🔀</td><td><code>:twisted_rightwards_arrows:</code></td><td>分支合并</td></tr></tbody></table><h1 id="emoji-表情">emoji 表情</h1><h2 id="人物">人物</h2><table><colgroup><col style="width: 1%"><col style="width: 10%"><col style="width: 1%"><col style="width: 12%"><col style="width: 51%"><col style="width: 12%"><col style="width: 1%"><col style="width: 9%"></colgroup><thead><tr class="header"><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th></tr></thead><tbody><tr class="odd"><td>😄</td><td><code>:smile:</code></td><td>😆</td><td><code>:laughing:</code></td><td>😊</td><td><code>:blush:</code></td><td>😃</td><td><code>:smiley:</code></td></tr><tr class="even"><td>😏</td><td><code>:smirk:</code></td><td>😍</td><td><code>:heart_eyes:</code></td><td>😘</td><td><code>:kissing_heart:</code></td><td>😚</td><td><code>:kissing_closed_eyes:</code></td></tr><tr class="odd"><td>😌</td><td><code>:satisfied:</code></td><td>😁</td><td><code>:grin:</code></td><td>☺️</td><td><code>:relaxed:</code></td><td>😳</td><td><code>:flushed:</code></td></tr><tr class="even"><td>😉</td><td><code>:wink:</code></td><td>😜</td><td><code>:stuck_out_tongue_winking_eye:</code></td><td>😝</td><td><code>:stuck_out_tongue_closed_eyes:</code></td><td>😀</td><td><code>:grinning:</code></td></tr><tr class="odd"><td>😗</td><td><code>:kissing:</code></td><td>😙</td><td><code>:kissing_smiling_eyes:</code></td><td>😛</td><td><code>:stuck_out_tongue:</code></td><td>😴</td><td><code>:sleeping:</code></td></tr><tr class="even"><td>😟</td><td><code>:worried:</code></td><td>😦</td><td><code>:frowning:</code></td><td>😧</td><td><code>:anguished:</code></td><td>😮</td><td><code>:open_mouth:</code></td></tr><tr class="odd"><td>😬</td><td><code>:grimacing:</code></td><td>😕</td><td><code>:confused:</code></td><td>😯</td><td><code>:hushed:</code></td><td>😑</td><td><code>:expressionless:</code></td></tr><tr class="even"><td>😒</td><td><code>:unamused:</code></td><td>😅</td><td><code>:sweat_smile:</code></td><td>😓</td><td><code>:sweat:</code></td><td>😥</td><td><code>:disappointed_relieved:</code></td></tr><tr class="odd"><td>😩</td><td><code>:weary:</code></td><td>😔</td><td><code>:pensive:</code></td><td>😞</td><td><code>:disappointed:</code></td><td>😖</td><td><code>:fearful:</code></td></tr><tr class="even"><td>😰</td><td><code>:cold_sweat:</code></td><td>😣</td><td><code>:persevere:</code></td><td>😢</td><td><code>:cry:</code></td><td>😭</td><td><code>:sob:</code></td></tr><tr class="odd"><td>😂</td><td><code>:joy:</code></td><td>😲</td><td><code>:astonished:</code></td><td>😱</td><td><code>:scream:</code></td><td>😫</td><td><code>:tired_face:</code></td></tr><tr class="even"><td>😠</td><td><code>:angry:</code></td><td>😡</td><td><code>:rage:</code></td><td>😤</td><td><code>:triumph:</code></td><td>😪</td><td><code>:sleepy:</code></td></tr><tr class="odd"><td>😋</td><td><code>:yum:</code></td><td>😷</td><td><code>:mask:</code></td><td>😎</td><td><code>:sunglasses:</code></td><td>😵</td><td><code>:dizzy_face:</code></td></tr><tr class="even"><td>👿</td><td><code>:imp:</code></td><td>😈</td><td><code>:smiling_imp:</code></td><td>😐</td><td><code>:neutral_face:</code></td><td>😶</td><td><code>:no_mouth:</code></td></tr><tr class="odd"><td>😇</td><td><code>:innocent:</code></td><td>👽</td><td><code>:alien:</code></td><td>💛</td><td><code>:yellow_heart:</code></td><td>💙</td><td><code>:blue_heart:</code></td></tr><tr class="even"><td>💜</td><td><code>:purple_heart:</code></td><td>❤️</td><td><code>:heart:</code></td><td>💚</td><td><code>:green_heart:</code></td><td>💔</td><td><code>:broken_heart:</code></td></tr><tr class="odd"><td>💓</td><td><code>:heartbeat:</code></td><td>💗</td><td><code>:heartpulse:</code></td><td>💕</td><td><code>:two_hearts:</code></td><td>💞</td><td><code>:revolving_hearts:</code></td></tr><tr class="even"><td>💘</td><td><code>:cupid:</code></td><td>💖</td><td><code>:sparkling_heart:</code></td><td>✨</td><td><code>:sparkles:</code></td><td>⭐️</td><td><code>:star:</code></td></tr><tr class="odd"><td>🌟</td><td><code>:star2:</code></td><td>💫</td><td><code>:dizzy:</code></td><td>💥</td><td><code>:boom:</code></td><td>💥</td><td><code>:collision:</code></td></tr><tr class="even"><td>💢</td><td><code>:anger:</code></td><td>❗️</td><td><code>:exclamation:</code></td><td>❓</td><td><code>:question:</code></td><td>❕</td><td><code>:grey_exclamation:</code></td></tr><tr class="odd"><td>❔</td><td><code>:grey_question:</code></td><td>💤</td><td>💤</td><td>💨</td><td><code>:dash:</code></td><td>💦</td><td><code>:sweat_drops:</code></td></tr><tr class="even"><td>🎶</td><td><code>:notes:</code></td><td>🎵</td><td><code>:musical_note:</code></td><td>🔥</td><td><code>:fire:</code></td><td>💩</td><td><code>:hankey:</code></td></tr><tr class="odd"><td>💩</td><td><code>:poop:</code></td><td>💩</td><td><code>:shit:</code></td><td>👍</td><td><code>:+1:</code></td><td>👍</td><td><code>:thumbsup:</code></td></tr><tr class="even"><td>👎</td><td><code>:-1:</code></td><td>👎</td><td><code>:thumbsdown:</code></td><td>👌</td><td><code>:ok_hand:</code></td><td>👊</td><td><code>:punch:</code></td></tr><tr class="odd"><td>👊</td><td><code>:facepunch:</code></td><td>✊</td><td><code>:fist:</code></td><td>✌️</td><td><code>:v:</code></td><td>👋</td><td><code>:wave:</code></td></tr><tr class="even"><td>✋</td><td><code>:hand:</code></td><td>✋</td><td><code>:raised_hand:</code></td><td>👐</td><td><code>:open_hands:</code></td><td>☝️</td><td><code>:point_up:</code></td></tr><tr class="odd"><td>👇</td><td><code>:point_down:</code></td><td>👈</td><td><code>:point_left:</code></td><td>👉</td><td><code>:point_right:</code></td><td>🙌</td><td><code>:raised_hands:</code></td></tr><tr class="even"><td>🙏</td><td><code>:pray:</code></td><td>👆</td><td><code>:point_up_2:</code></td><td>👏</td><td><code>:clap:</code></td><td>💪</td><td><code>:muscle:</code></td></tr><tr class="odd"><td>🤘</td><td><code>:metal:</code></td><td>🖕</td><td><code>:fu:</code></td><td>🚶</td><td><code>:walking:</code></td><td>🏃</td><td><code>:runner:</code></td></tr><tr class="even"><td>🏃</td><td><code>:running:</code></td><td>👫</td><td><code>:couple:</code></td><td>👪</td><td><code>:family:</code></td><td>👬</td><td><code>:two_men_holding_hands:</code></td></tr><tr class="odd"><td>👭</td><td><code>:two_women_holding_hands:</code></td><td>💃</td><td><code>:dancer:</code></td><td>👯</td><td><code>:dancers:</code></td><td>🙆</td><td><code>:ok_woman:</code></td></tr><tr class="even"><td>🙅</td><td><code>:no_good:</code></td><td>💁</td><td><code>:information_desk_person:</code></td><td>🙋</td><td><code>:raising_hand:</code></td><td>👰</td><td><code>:bride_with_veil:</code></td></tr><tr class="odd"><td>🙎</td><td><code>:person_with_pouting_face:</code></td><td>🙍</td><td><code>:person_frowning:</code></td><td>🙇</td><td><code>:bow:</code></td><td>👦</td><td><code>:boy:</code></td></tr><tr class="even"><td>💑</td><td><code>:couple_with_heart:</code></td><td>💆</td><td><code>:massage:</code></td><td>💇</td><td><code>:haircut:</code></td><td>💅</td><td><code>:nail_care:</code></td></tr><tr class="odd"><td>👧</td><td><code>:girl:</code></td><td>👩</td><td><code>:woman:</code></td><td>👨</td><td><code>:man:</code></td><td>👶</td><td><code>:baby:</code></td></tr><tr class="even"><td>👵</td><td><code>:older_woman:</code></td><td>👴</td><td><code>:older_man:</code></td><td>👱</td><td><code>:person_with_blond_hair:</code></td><td>👲</td><td><code>:man_with_gua_pi_mao:</code></td></tr><tr class="odd"><td>👳</td><td><code>:man_with_turban:</code></td><td>👷</td><td><code>:construction_worker:</code></td><td>👮</td><td><code>:cop:</code></td><td>👼</td><td><code>:angel:</code></td></tr><tr class="even"><td>👸</td><td><code>:princess:</code></td><td>😺</td><td><code>:smiley_cat:</code></td><td>😸</td><td><code>:smile_cat:</code></td><td>😻</td><td><code>:heart_eyes_cat:</code></td></tr><tr class="odd"><td>😽</td><td><code>:kissing_cat:</code></td><td>😼</td><td><code>:smirk_cat:</code></td><td>🙀</td><td><code>:scream_cat:</code></td><td>😿</td><td><code>:crying_cat_face:</code></td></tr><tr class="even"><td>😹</td><td><code>:joy_cat:</code></td><td>😾</td><td><code>:pouting_cat:</code></td><td>👹</td><td><code>:japanese_ogre:</code></td><td>👺</td><td><code>:japanese_goblin:</code></td></tr><tr class="odd"><td>🙈</td><td><code>:see_no_evil:</code></td><td>🙉</td><td><code>:hear_no_evil:</code></td><td>🙊</td><td><code>:speak_no_evil:</code></td><td>💂</td><td><code>:guardsman:</code></td></tr><tr class="even"><td>💀</td><td><code>:skull:</code></td><td>🐾</td><td><code>:feet:</code></td><td>👄</td><td><code>:lips:</code></td><td>💋</td><td><code>:kiss:</code></td></tr><tr class="odd"><td>💧</td><td><code>:droplet:</code></td><td>👂</td><td><code>:ear:</code></td><td>👀</td><td><code>:eyes:</code></td><td>👃</td><td><code>:nose:</code></td></tr><tr class="even"><td>👅</td><td><code>:tongue:</code></td><td>💌</td><td><code>:love_letter:</code></td><td>👤</td><td><code>:bust_in_silhouette:</code></td><td>👥</td><td><code>:busts_in_silhouette:</code></td></tr><tr class="odd"><td>💬</td><td><code>:speech_balloon:</code></td><td>💭</td><td><code>:thought_balloon:</code></td><td>:trollface:</td><td><code>:trollface:</code></td><td></td><td></td></tr></tbody></table><h2 id="自然">自然</h2><table style="width:100%;"><colgroup><col style="width: 1%"><col style="width: 12%"><col style="width: 51%"><col style="width: 12%"><col style="width: 1%"><col style="width: 9%"><col style="width: 1%"><col style="width: 9%"></colgroup><thead><tr class="header"><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th></tr></thead><tbody><tr class="odd"><td>☀️</td><td><code>:sunny:</code></td><td>☔️</td><td><code>:umbrella:</code></td><td>☁️</td><td><code>:cloud:</code></td><td>❄️</td><td><code>:snowflake:</code></td></tr><tr class="even"><td>⛄️</td><td><code>:snowman:</code></td><td>⚡️</td><td><code>:zap:</code></td><td>🌀</td><td><code>:cyclone:</code></td><td>🌁</td><td><code>:foggy:</code></td></tr><tr class="odd"><td>🌊</td><td><code>:ocean:</code></td><td>🐱</td><td><code>:cat:</code></td><td>🐶</td><td><code>:dog:</code></td><td>🐭</td><td><code>:mouse:</code></td></tr><tr class="even"><td>🐹</td><td><code>:hamster:</code></td><td>🐰</td><td><code>:rabbit:</code></td><td>🐺</td><td><code>:wolf:</code></td><td>🐸</td><td><code>:frog:</code></td></tr><tr class="odd"><td>🐯</td><td><code>:tiger:</code></td><td>🐨</td><td><code>:koala:</code></td><td>🐻</td><td><code>:bear:</code></td><td>🐷</td><td><code>:pig:</code></td></tr><tr class="even"><td>🐽</td><td><code>:pig_nose:</code></td><td>🐮</td><td><code>:cow:</code></td><td>🐗</td><td><code>:boar:</code></td><td>🐵</td><td><code>:monkey_face:</code></td></tr><tr class="odd"><td>🐒</td><td><code>:monkey:</code></td><td>🐴</td><td><code>:horse:</code></td><td>🐎</td><td><code>:racehorse:</code></td><td>🐫</td><td><code>:camel:</code></td></tr><tr class="even"><td>🐑</td><td><code>:sheep:</code></td><td>🐘</td><td><code>:elephant:</code></td><td>🐼</td><td><code>:panda_face:</code></td><td>🐍</td><td><code>:snake:</code></td></tr><tr class="odd"><td>🐦</td><td><code>:bird:</code></td><td>🐤</td><td><code>:baby_chick:</code></td><td>🐥</td><td><code>:hatched_chick:</code></td><td>🐣</td><td><code>:hatching_chick:</code></td></tr><tr class="even"><td>🐔</td><td><code>:chicken:</code></td><td>🐧</td><td><code>:penguin:</code></td><td>🐢</td><td><code>:turtle:</code></td><td>🐛</td><td><code>:bug:</code></td></tr><tr class="odd"><td>🐝</td><td><code>:honeybee:</code></td><td>🐜</td><td><code>:ant:</code></td><td>🐞</td><td><code>:beetle:</code></td><td>🐌</td><td><code>:snail:</code></td></tr><tr class="even"><td>🐙</td><td><code>:octopus:</code></td><td>🐠</td><td><code>:tropical_fish:</code></td><td>🐟</td><td><code>:fish:</code></td><td>🐳</td><td><code>:whale:</code></td></tr><tr class="odd"><td>🐋</td><td><code>:whale2:</code></td><td>🐬</td><td><code>:dolphin:</code></td><td>🐄</td><td><code>:cow2:</code></td><td>🐏</td><td><code>:ram:</code></td></tr><tr class="even"><td>🐀</td><td><code>:rat:</code></td><td>🐃</td><td><code>:water_buffalo:</code></td><td>🐅</td><td><code>:tiger2:</code></td><td>🐇</td><td><code>:rabbit2:</code></td></tr><tr class="odd"><td>🐉</td><td><code>:dragon:</code></td><td>🐐</td><td>🐐</td><td>🐓</td><td><code>:rooster:</code></td><td>🐕</td><td><code>:dog2:</code></td></tr><tr class="even"><td>🐖</td><td><code>:pig2:</code></td><td>🐁</td><td><code>:mouse2:</code></td><td>🐂</td><td><code>:ox:</code></td><td>🐲</td><td><code>:dragon_face:</code></td></tr><tr class="odd"><td>🐡</td><td><code>:blowfish:</code></td><td>🐊</td><td><code>:crocodile:</code></td><td>🐪</td><td><code>:dromedary_camel:</code></td><td>🐆</td><td><code>:leopard:</code></td></tr><tr class="even"><td>🐈</td><td><code>:cat2:</code></td><td>🐩</td><td><code>:poodle:</code></td><td>🐾</td><td><code>:paw_prints:</code></td><td>💐</td><td><code>:bouquet:</code></td></tr><tr class="odd"><td>🌸</td><td><code>:cherry_blossom:</code></td><td>🌷</td><td><code>:tulip:</code></td><td>🍀</td><td><code>:four_leaf_clover:</code></td><td>🌹</td><td><code>:rose:</code></td></tr><tr class="even"><td>🌻</td><td><code>:sunflower:</code></td><td>🌺</td><td><code>:hibiscus:</code></td><td>🍁</td><td><code>:maple_leaf:</code></td><td>🍃</td><td><code>:leaves:</code></td></tr><tr class="odd"><td>🍂</td><td><code>:fallen_leaf:</code></td><td>🌿</td><td><code>:herb:</code></td><td>🍄</td><td><code>:mushroom:</code></td><td>🌵</td><td><code>:cactus:</code></td></tr><tr class="even"><td>🌴</td><td><code>:palm_tree:</code></td><td>🌲</td><td><code>:evergreen_tree:</code></td><td>🌳</td><td><code>:deciduous_tree:</code></td><td>🌰</td><td><code>:chestnut:</code></td></tr><tr class="odd"><td>🌱</td><td><code>:seedling:</code></td><td>🌼</td><td><code>:blossom:</code></td><td>🌾</td><td><code>:ear_of_rice:</code></td><td>🐚</td><td><code>:shell:</code></td></tr><tr class="even"><td>🌐</td><td><code>:globe_with_meridians:</code></td><td>🌞</td><td><code>:sun_with_face:</code></td><td>🌝</td><td><code>:full_moon_with_face:</code></td><td>🌚</td><td><code>:new_moon_with_face:</code></td></tr><tr class="odd"><td>🌑</td><td><code>:new_moon:</code></td><td>🌒</td><td><code>:waxing_crescent_moon:</code></td><td>🌓</td><td><code>:first_quarter_moon:</code></td><td>🌔</td><td><code>:waxing_gibbous_moon:</code></td></tr><tr class="even"><td>🌕</td><td><code>:full_moon:</code></td><td>🌖</td><td><code>:waning_gibbous_moon:</code></td><td>🌗</td><td><code>:last_quarter_moon:</code></td><td>🌘</td><td><code>:waning_crescent_moon:</code></td></tr><tr class="odd"><td>🌜</td><td><code>:last_quarter_moon_with_face:</code></td><td>🌛</td><td><code>:first_quarter_moon_with_face:</code></td><td>🌔</td><td><code>:moon:</code></td><td>🌍</td><td><code>:earth_africa:</code></td></tr><tr class="even"><td>🌎</td><td><code>:earth_americas:</code></td><td>🌏</td><td><code>:earth_asia:</code></td><td>🌋</td><td><code>:volcano:</code></td><td>🌌</td><td><code>:milky_way:</code></td></tr><tr class="odd"><td>⛅️</td><td><code>:partly_sunny:</code></td><td>:octocat:</td><td><code>:octocat:</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="事物">事物</h2><table><colgroup><col style="width: 2%"><col style="width: 21%"><col style="width: 2%"><col style="width: 17%"><col style="width: 2%"><col style="width: 22%"><col style="width: 2%"><col style="width: 26%"></colgroup><thead><tr class="header"><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th></tr></thead><tbody><tr class="odd"><td>🎍</td><td><code>:bamboo:</code></td><td>💝</td><td><code>:gift_heart:</code></td><td>🎎</td><td><code>:dolls:</code></td><td>🎒</td><td><code>:school_satchel:</code></td></tr><tr class="even"><td>🎓</td><td><code>:mortar_board:</code></td><td>🎏</td><td><code>:flags:</code></td><td>🎆</td><td><code>:fireworks:</code></td><td>🎇</td><td><code>:sparkler:</code></td></tr><tr class="odd"><td>🎐</td><td><code>:wind_chime:</code></td><td>🎑</td><td><code>:rice_scene:</code></td><td>🎃</td><td><code>:jack_o_lantern:</code></td><td>👻</td><td><code>:ghost:</code></td></tr><tr class="even"><td>🎅</td><td><code>:santa:</code></td><td>🎄</td><td><code>:christmas_tree:</code></td><td>🎁</td><td><code>:gift:</code></td><td>🔔</td><td><code>:bell:</code></td></tr><tr class="odd"><td>🔕</td><td><code>:no_bell:</code></td><td>🎋</td><td><code>:tanabata_tree:</code></td><td>🎉</td><td><code>:tada:</code></td><td>🎊</td><td><code>:confetti_ball:</code></td></tr><tr class="even"><td>🎈</td><td><code>:balloon:</code></td><td>🔮</td><td><code>:crystal_ball:</code></td><td>💿</td><td><code>:cd:</code></td><td>📀</td><td><code>:dvd:</code></td></tr><tr class="odd"><td>💾</td><td><code>:floppy_disk:</code></td><td>📷</td><td><code>:camera:</code></td><td>📹</td><td><code>:video_camera:</code></td><td>🎥</td><td><code>:movie_camera:</code></td></tr><tr class="even"><td>💻</td><td><code>:computer:</code></td><td>📺</td><td><code>:tv:</code></td><td>📱</td><td><code>:iphone:</code></td><td>☎️</td><td><code>:phone:</code></td></tr><tr class="odd"><td>☎️</td><td><code>:telephone:</code></td><td>📞</td><td><code>:telephone_receiver:</code></td><td>📟</td><td><code>:pager:</code></td><td>📠</td><td><code>:fax:</code></td></tr><tr class="even"><td>💽</td><td><code>:minidisc:</code></td><td>📼</td><td><code>:vhs:</code></td><td>🔉</td><td><code>:sound:</code></td><td>🔈</td><td><code>:speaker:</code></td></tr><tr class="odd"><td>🔇</td><td><code>:mute:</code></td><td>📢</td><td><code>:loudspeaker:</code></td><td>📣</td><td><code>:mega:</code></td><td>⌛️</td><td><code>:hourglass:</code></td></tr><tr class="even"><td>⏳</td><td><code>:hourglass_flowing_sand:</code></td><td>⏰</td><td><code>:alarm_clock:</code></td><td>⌚️</td><td><code>:watch:</code></td><td>📻</td><td><code>:radio:</code></td></tr><tr class="odd"><td>📡</td><td><code>:satellite:</code></td><td>➿</td><td><code>:loop:</code></td><td>🔍</td><td><code>:mag:</code></td><td>🔎</td><td><code>:mag_right:</code></td></tr><tr class="even"><td>🔓</td><td><code>:unlock:</code></td><td>🔒</td><td><code>:lock:</code></td><td>🔏</td><td><code>:lock_with_ink_pen:</code></td><td>🔐</td><td><code>:closed_lock_with_key:</code></td></tr><tr class="odd"><td>🔑</td><td><code>:key:</code></td><td>💡</td><td><code>:bulb:</code></td><td>🔦</td><td><code>:flashlight:</code></td><td>🔆</td><td><code>:high_brightness:</code></td></tr><tr class="even"><td>🔅</td><td><code>:low_brightness:</code></td><td>🔌</td><td><code>:electric_plug:</code></td><td>🔋</td><td><code>:battery:</code></td><td>📲</td><td><code>:calling:</code></td></tr><tr class="odd"><td>✉️</td><td><code>:email:</code></td><td>📫</td><td><code>:mailbox:</code></td><td>📮</td><td><code>:postbox:</code></td><td>🛀</td><td><code>:bath:</code></td></tr><tr class="even"><td>🛁</td><td><code>:bathtub:</code></td><td>🚿</td><td><code>:shower:</code></td><td>🚽</td><td><code>:toilet:</code></td><td>🔧</td><td><code>:wrench:</code></td></tr><tr class="odd"><td>🔩</td><td><code>:nut_and_bolt:</code></td><td>🔨</td><td><code>:hammer:</code></td><td>💺</td><td><code>:seat:</code></td><td>💰</td><td><code>:moneybag:</code></td></tr><tr class="even"><td>💴</td><td><code>:yen:</code></td><td>💵</td><td><code>:dollar:</code></td><td>💷</td><td><code>:pound:</code></td><td>💶</td><td><code>:euro:</code></td></tr><tr class="odd"><td>💳</td><td><code>:credit_card:</code></td><td>💸</td><td><code>:money_with_wings:</code></td><td>📧</td><td><code>:e-mail:</code></td><td>📥</td><td><code>:inbox_tray:</code></td></tr><tr class="even"><td>📤</td><td><code>:outbox_tray:</code></td><td>✉️</td><td><code>:envelope:</code></td><td>📨</td><td><code>:incoming_envelope:</code></td><td>📯</td><td><code>:postal_horn:</code></td></tr><tr class="odd"><td>📪</td><td><code>:mailbox_closed:</code></td><td>📬</td><td><code>:mailbox_with_mail:</code></td><td>📭</td><td><code>:mailbox_with_no_mail:</code></td><td>🚪</td><td><code>:door:</code></td></tr><tr class="even"><td>🚬</td><td><code>:smoking:</code></td><td>💣</td><td><code>:bomb:</code></td><td>🔫</td><td><code>:gun:</code></td><td>🔪</td><td><code>:hocho:</code></td></tr><tr class="odd"><td>💊</td><td><code>:pill:</code></td><td>💉</td><td><code>:syringe:</code></td><td>📄</td><td><code>:page_facing_up:</code></td><td>📃</td><td><code>:page_with_curl:</code></td></tr><tr class="even"><td>📑</td><td><code>:bookmark_tabs:</code></td><td>📊</td><td><code>:bar_chart:</code></td><td>📈</td><td><code>:chart_with_upwards_trend:</code></td><td>📉</td><td><code>:chart_with_downwards_trend:</code></td></tr><tr class="odd"><td>📜</td><td><code>:scroll:</code></td><td>📋</td><td><code>:clipboard:</code></td><td>📆</td><td><code>:calendar:</code></td><td>📅</td><td><code>:date:</code></td></tr><tr class="even"><td>📇</td><td><code>:card_index:</code></td><td>📁</td><td><code>:file_folder:</code></td><td>📂</td><td><code>:open_file_folder:</code></td><td>✂️</td><td><code>:scissors:</code></td></tr><tr class="odd"><td>📌</td><td><code>:pushpin:</code></td><td>📎</td><td><code>:paperclip:</code></td><td>✒️</td><td><code>:black_nib:</code></td><td>✏️</td><td><code>:pencil2:</code></td></tr><tr class="even"><td>📏</td><td><code>:straight_ruler:</code></td><td>📐</td><td><code>:triangular_ruler:</code></td><td>📕</td><td><code>:closed_book:</code></td><td>📗</td><td><code>:green_book:</code></td></tr><tr class="odd"><td>📘</td><td><code>:blue_book:</code></td><td>📙</td><td><code>:orange_book:</code></td><td>📓</td><td><code>:notebook:</code></td><td>📔</td><td><code>:notebook_with_decorative_cover:</code></td></tr><tr class="even"><td>📒</td><td><code>:ledger:</code></td><td>📚</td><td><code>:books:</code></td><td>🔖</td><td><code>:bookmark:</code></td><td>📛</td><td><code>:name_badge:</code></td></tr><tr class="odd"><td>🔬</td><td><code>:microscope:</code></td><td>🔭</td><td><code>:telescope:</code></td><td>📰</td><td><code>:newspaper:</code></td><td>🏈</td><td><code>:football:</code></td></tr><tr class="even"><td>🏀</td><td><code>:basketball:</code></td><td>⚽️</td><td><code>:soccer:</code></td><td>⚾️</td><td><code>:baseball:</code></td><td>🎾</td><td><code>:tennis:</code></td></tr><tr class="odd"><td>🎱</td><td><code>:8ball:</code></td><td>🏉</td><td><code>:rugby_football:</code></td><td>🎳</td><td><code>:bowling:</code></td><td>⛳️</td><td><code>:golf:</code></td></tr><tr class="even"><td>🚵</td><td><code>:mountain_bicyclist:</code></td><td>🚴</td><td><code>:bicyclist:</code></td><td>🏇</td><td><code>:horse_racing:</code></td><td>🏂</td><td><code>:snowboarder:</code></td></tr><tr class="odd"><td>🏊</td><td><code>:swimmer:</code></td><td>🏄</td><td><code>:surfer:</code></td><td>🎿</td><td><code>:ski:</code></td><td>♠️</td><td><code>:spades:</code></td></tr><tr class="even"><td>♥️</td><td><code>:hearts:</code></td><td>♣️</td><td><code>:clubs:</code></td><td>♦️</td><td><code>:diamonds:</code></td><td>💎</td><td><code>:gem:</code></td></tr><tr class="odd"><td>💍</td><td><code>:ring:</code></td><td>🏆</td><td><code>:trophy:</code></td><td>🎼</td><td><code>:musical_score:</code></td><td>🎹</td><td><code>:musical_keyboard:</code></td></tr><tr class="even"><td>🎻</td><td><code>:violin:</code></td><td>👾</td><td><code>:space_invader:</code></td><td>🎮</td><td><code>:video_game:</code></td><td>🃏</td><td><code>:black_joker:</code></td></tr><tr class="odd"><td>🎴</td><td><code>:flower_playing_cards:</code></td><td>🎲</td><td><code>:game_die:</code></td><td>🎯</td><td><code>:dart:</code></td><td>🀄️</td><td><code>:mahjong:</code></td></tr><tr class="even"><td>🎬</td><td><code>:clapper:</code></td><td>📝</td><td><code>:memo:</code></td><td>📝</td><td><code>:pencil:</code></td><td>📖</td><td><code>:book:</code></td></tr><tr class="odd"><td>🎨</td><td><code>:art:</code></td><td>🎤</td><td><code>:microphone:</code></td><td>🎧</td><td><code>:headphones:</code></td><td>🎺</td><td><code>:trumpet:</code></td></tr><tr class="even"><td>🎷</td><td><code>:saxophone:</code></td><td>🎸</td><td><code>:guitar:</code></td><td>👞</td><td><code>:shoe:</code></td><td>👡</td><td><code>:sandal:</code></td></tr><tr class="odd"><td>👠</td><td><code>:high_heel:</code></td><td>💄</td><td><code>:lipstick:</code></td><td>👢</td><td><code>:boot:</code></td><td>👕</td><td><code>:shirt:</code></td></tr><tr class="even"><td>👕</td><td><code>:tshirt:</code></td><td>👔</td><td><code>:necktie:</code></td><td>👚</td><td><code>:womans_clothes:</code></td><td>👗</td><td><code>:dress:</code></td></tr><tr class="odd"><td>🎽</td><td><code>:running_shirt_with_sash:</code></td><td>👖</td><td><code>:jeans:</code></td><td>👘</td><td><code>:kimono:</code></td><td>👙</td><td><code>:bikini:</code></td></tr><tr class="even"><td>🎀</td><td><code>:ribbon:</code></td><td>🎩</td><td><code>:tophat:</code></td><td>👑</td><td><code>:crown:</code></td><td>👒</td><td><code>:womans_hat:</code></td></tr><tr class="odd"><td>👞</td><td><code>:mans_shoe:</code></td><td>🌂</td><td><code>:closed_umbrella:</code></td><td>💼</td><td><code>:briefcase:</code></td><td>👜</td><td><code>:handbag:</code></td></tr><tr class="even"><td>👝</td><td><code>:pouch:</code></td><td>👛</td><td><code>:purse:</code></td><td>👓</td><td><code>:eyeglasses:</code></td><td>🎣</td><td><code>:fishing_pole_and_fish:</code></td></tr><tr class="odd"><td>☕️</td><td><code>:coffee:</code></td><td>🍵</td><td><code>:tea:</code></td><td>🍶</td><td><code>:sake:</code></td><td>🍼</td><td><code>:baby_bottle:</code></td></tr><tr class="even"><td>🍺</td><td><code>:beer:</code></td><td>🍻</td><td><code>:beers:</code></td><td>🍸</td><td><code>:cocktail:</code></td><td>🍹</td><td><code>:tropical_drink:</code></td></tr><tr class="odd"><td>🍷</td><td><code>:wine_glass:</code></td><td>🍴</td><td><code>:fork_and_knife:</code></td><td>🍕</td><td><code>:pizza:</code></td><td>🍔</td><td><code>:hamburger:</code></td></tr><tr class="even"><td>🍟</td><td><code>:fries:</code></td><td>🍗</td><td><code>:poultry_leg:</code></td><td>🍖</td><td><code>:meat_on_bone:</code></td><td>🍝</td><td><code>:spaghetti:</code></td></tr><tr class="odd"><td>🍛</td><td><code>:curry:</code></td><td>🍤</td><td><code>:fried_shrimp:</code></td><td>🍱</td><td><code>:bento:</code></td><td>🍣</td><td><code>:sushi:</code></td></tr><tr class="even"><td>🍥</td><td><code>:fish_cake:</code></td><td>🍙</td><td><code>:rice_ball:</code></td><td>🍘</td><td><code>:rice_cracker:</code></td><td>🍚</td><td><code>:rice:</code></td></tr><tr class="odd"><td>🍜</td><td><code>:ramen:</code></td><td>🍲</td><td><code>:stew:</code></td><td>🍢</td><td><code>:oden:</code></td><td>🍡</td><td><code>:dango:</code></td></tr><tr class="even"><td>🥚</td><td><code>:egg:</code></td><td>🍞</td><td><code>:bread:</code></td><td>🍩</td><td><code>:doughnut:</code></td><td>🍮</td><td><code>:custard:</code></td></tr><tr class="odd"><td>🍦</td><td><code>:icecream:</code></td><td>🍨</td><td><code>:ice_cream:</code></td><td>🍧</td><td><code>:shaved_ice:</code></td><td>🎂</td><td><code>:birthday:</code></td></tr><tr class="even"><td>🍰</td><td><code>:cake:</code></td><td>🍪</td><td><code>:cookie:</code></td><td>🍪</td><td><code>:cookie:</code></td><td>🍫</td><td><code>:chocolate_bar:</code></td></tr><tr class="odd"><td>🍬</td><td><code>:candy:</code></td><td>🍭</td><td><code>:lollipop:</code></td><td>🍯</td><td><code>:honey_pot:</code></td><td>🍎</td><td><code>:apple:</code></td></tr><tr class="even"><td>🍏</td><td><code>:green_apple:</code></td><td>🍊</td><td><code>:tangerine:</code></td><td>🍋</td><td><code>:lemon:</code></td><td>🍒</td><td><code>:cherries:</code></td></tr><tr class="odd"><td>🍇</td><td><code>:grapes:</code></td><td>🍉</td><td><code>:watermelon:</code></td><td>🍓</td><td><code>:strawberry:</code></td><td>🍑</td><td><code>:peach:</code></td></tr><tr class="even"><td>🍈</td><td><code>:melon:</code></td><td>🍌</td><td><code>:banana:</code></td><td>🍐</td><td><code>:pear:</code></td><td>🍍</td><td><code>:pineapple:</code></td></tr><tr class="odd"><td>🍠</td><td><code>:sweet_potato:</code></td><td>🍆</td><td><code>:eggplant:</code></td><td>🍅</td><td><code>:tomato:</code></td><td>🌽</td><td><code>:corn:</code></td></tr></tbody></table><h2 id="地点">地点</h2><table><colgroup><col style="width: 3%"><col style="width: 18%"><col style="width: 3%"><col style="width: 22%"><col style="width: 3%"><col style="width: 23%"><col style="width: 3%"><col style="width: 22%"></colgroup><thead><tr class="header"><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th></tr></thead><tbody><tr class="odd"><td>🏠</td><td><code>:house:</code></td><td>🏡</td><td><code>:house_with_garden:</code></td><td>🏫</td><td><code>:school:</code></td><td>🏢</td><td><code>:office:</code></td></tr><tr class="even"><td>🏣</td><td><code>:post_office:</code></td><td>🏥</td><td><code>:hospital:</code></td><td>🏦</td><td><code>:bank:</code></td><td>🏪</td><td><code>:convenience_store:</code></td></tr><tr class="odd"><td>🏩</td><td><code>:love_hotel:</code></td><td>🏨</td><td><code>:hotel:</code></td><td>💒</td><td><code>:wedding:</code></td><td>⛪️</td><td><code>:church:</code></td></tr><tr class="even"><td>🏬</td><td><code>:department_store:</code></td><td>🏤</td><td><code>:european_post_office:</code></td><td>🌇</td><td><code>:city_sunrise:</code></td><td>🌆</td><td><code>:city_sunset:</code></td></tr><tr class="odd"><td>🏯</td><td><code>:japanese_castle:</code></td><td>🏰</td><td><code>:european_castle:</code></td><td>⛺️</td><td><code>:tent:</code></td><td>🏭</td><td><code>:factory:</code></td></tr><tr class="even"><td>🗼</td><td><code>:tokyo_tower:</code></td><td>🗾</td><td><code>:japan:</code></td><td>🗻</td><td><code>:mount_fuji:</code></td><td>🌄</td><td><code>:sunrise_over_mountains:</code></td></tr><tr class="odd"><td>🌅</td><td><code>:sunrise:</code></td><td>🌠</td><td><code>:stars:</code></td><td>🗽</td><td><code>:statue_of_liberty:</code></td><td>🌉</td><td><code>:bridge_at_night:</code></td></tr><tr class="even"><td>🎠</td><td><code>:carousel_horse:</code></td><td>🌈</td><td><code>:rainbow:</code></td><td>🎡</td><td><code>:ferris_wheel:</code></td><td>⛲️</td><td><code>:fountain:</code></td></tr><tr class="odd"><td>🎢</td><td><code>:roller_coaster:</code></td><td>🚢</td><td><code>:ship:</code></td><td>🚤</td><td><code>:speedboat:</code></td><td>⛵️</td><td><code>:boat:</code></td></tr><tr class="even"><td>⛵️</td><td><code>:sailboat:</code></td><td>🚣</td><td><code>:rowboat:</code></td><td>⚓️</td><td><code>:anchor:</code></td><td>🚀</td><td><code>:rocket:</code></td></tr><tr class="odd"><td>✈️</td><td><code>:airplane:</code></td><td>🚁</td><td><code>:helicopter:</code></td><td>🚂</td><td><code>:steam_locomotive:</code></td><td>🚊</td><td><code>:tram:</code></td></tr><tr class="even"><td>🚞</td><td><code>:mountain_railway:</code></td><td>🚲</td><td><code>:bike:</code></td><td>🚡</td><td><code>:aerial_tramway:</code></td><td>🚟</td><td><code>:suspension_railway:</code></td></tr><tr class="odd"><td>🚠</td><td><code>:mountain_cableway:</code></td><td>🚜</td><td><code>:tractor:</code></td><td>🚙</td><td><code>:blue_car:</code></td><td>🚘</td><td><code>:oncoming_automobile:</code></td></tr><tr class="even"><td>🚗</td><td><code>:car:</code></td><td>🚗</td><td><code>:red_car:</code></td><td>🚕</td><td><code>:taxi:</code></td><td>🚖</td><td><code>:oncoming_taxi:</code></td></tr><tr class="odd"><td>🚛</td><td><code>:articulated_lorry:</code></td><td>🚌</td><td><code>:bus:</code></td><td>🚍</td><td><code>:oncoming_bus:</code></td><td>🚨</td><td><code>:rotating_light:</code></td></tr><tr class="even"><td>🚓</td><td><code>:police_car:</code></td><td>🚔</td><td><code>:oncoming_police_car:</code></td><td>🚒</td><td><code>:fire_engine:</code></td><td>🚑</td><td><code>:ambulance:</code></td></tr><tr class="odd"><td>🚐</td><td><code>:minibus:</code></td><td>🚚</td><td><code>:truck:</code></td><td>🚋</td><td><code>:train:</code></td><td>🚉</td><td><code>:station:</code></td></tr><tr class="even"><td>🚆</td><td><code>:train2:</code></td><td>🚅</td><td><code>:bullettrain_front:</code></td><td>🚄</td><td><code>:bullettrain_side:</code></td><td>🚈</td><td><code>:light_rail:</code></td></tr><tr class="odd"><td>🚝</td><td><code>:monorail:</code></td><td>🚃</td><td><code>:railway_car:</code></td><td>🚎</td><td><code>:trolleybus:</code></td><td>🎫</td><td><code>:ticket:</code></td></tr><tr class="even"><td>⛽️</td><td><code>:fuelpump:</code></td><td>🚦</td><td><code>:vertical_traffic_light:</code></td><td>🚥</td><td><code>:traffic_light:</code></td><td>⚠️</td><td><code>:warning:</code></td></tr><tr class="odd"><td>🚧</td><td><code>:construction:</code></td><td>🔰</td><td><code>:beginner:</code></td><td>🏧</td><td><code>:atm:</code></td><td>🎰</td><td><code>:slot_machine:</code></td></tr><tr class="even"><td>🚏</td><td><code>:busstop:</code></td><td>💈</td><td><code>:barber:</code></td><td>♨️</td><td><code>:hotsprings:</code></td><td>🏁</td><td><code>:checkered_flag:</code></td></tr><tr class="odd"><td>🎌</td><td><code>:crossed_flags:</code></td><td>🏮</td><td><code>:izakaya_lantern:</code></td><td>🗿</td><td><code>:moyai:</code></td><td>🎪</td><td><code>:circus_tent:</code></td></tr><tr class="even"><td>🎭</td><td><code>:performing_arts:</code></td><td>📍</td><td><code>:round_pushpin:</code></td><td>🚩</td><td><code>:triangular_flag_on_post:</code></td><td>🇯🇵</td><td><code>:jp:</code></td></tr><tr class="odd"><td>🇰🇷</td><td><code>:kr:</code></td><td>🇨🇳</td><td><code>:cn:</code></td><td>🇺🇸</td><td><code>:us:</code></td><td>🇫🇷</td><td><code>:fr:</code></td></tr><tr class="even"><td>🇪🇸</td><td><code>:es:</code></td><td>🇮🇹</td><td><code>:it:</code></td><td>🇷🇺</td><td><code>:ru:</code></td><td>🇬🇧</td><td><code>:gb:</code></td></tr><tr class="odd"><td>🇬🇧</td><td><code>:uk:</code></td><td>🇩🇪</td><td><code>:de:</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="符号">符号</h2><table><colgroup><col style="width: 3%"><col style="width: 22%"><col style="width: 3%"><col style="width: 24%"><col style="width: 3%"><col style="width: 19%"><col style="width: 3%"><col style="width: 20%"></colgroup><thead><tr class="header"><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th><th>表情</th><th>代码</th></tr></thead><tbody><tr class="odd"><td> 1️⃣</td><td><code>:one:</code></td><td>2️⃣</td><td><code>:two:</code></td><td>3️⃣</td><td><code>:three:</code></td><td>4️⃣</td><td><code>:four:</code></td></tr><tr class="even"><td>5️⃣</td><td><code>:five:</code></td><td>6️⃣</td><td><code>:six:</code></td><td>7️⃣</td><td><code>:seven:</code></td><td>8️⃣</td><td><code>:eight:</code></td></tr><tr class="odd"><td>9️⃣</td><td><code>:nine:</code></td><td>🔟</td><td><code>:keycap_ten:</code></td><td>🔢</td><td><code>:1234:</code></td><td>0️⃣</td><td><code>:zero:</code></td></tr><tr class="even"><td>#️⃣</td><td><code>:hash:</code></td><td>🔣</td><td><code>:symbols:</code></td><td>◀️</td><td><code>:arrow_backward:</code></td><td>⬇️</td><td><code>:arrow_down:</code></td></tr><tr class="odd"><td>▶️</td><td><code>:arrow_forward:</code></td><td>⬅️</td><td><code>:arrow_left:</code></td><td>🔠</td><td><code>:capital_abcd:</code></td><td>🔡</td><td><code>:abcd:</code></td></tr><tr class="even"><td>🔤</td><td><code>:abc:</code></td><td>↙️</td><td><code>:arrow_lower_left:</code></td><td>↘️</td><td><code>:arrow_lower_right:</code></td><td>➡️</td><td><code>:arrow_right:</code></td></tr><tr class="odd"><td>⬆️</td><td><code>:arrow_up:</code></td><td>↖️</td><td><code>:arrow_upper_left:</code></td><td>↗️</td><td><code>:arrow_upper_right:</code></td><td>⏬</td><td><code>:arrow_double_down:</code></td></tr><tr class="even"><td>⏫</td><td><code>:arrow_double_up:</code></td><td>🔽</td><td><code>:arrow_down_small:</code></td><td>⤵️</td><td><code>:arrow_heading_down:</code></td><td>⤴️</td><td><code>:arrow_heading_up:</code></td></tr><tr class="odd"><td>↩︎️</td><td><code>:leftwards_arrow_with_hook:</code></td><td>↪️</td><td><code>:arrow_right_hook:</code></td><td>↔︎️</td><td><code>:left_right_arrow:</code></td><td>↕️</td><td><code>:arrow_up_down:</code></td></tr><tr class="even"><td>🔼</td><td><code>:arrow_up_small:</code></td><td>🔃</td><td><code>:arrows_clockwise:</code></td><td>🔄</td><td><code>:arrows_counterclockwise:</code></td><td>⏪</td><td><code>:rewind:</code></td></tr><tr class="odd"><td>⏩</td><td><code>:fast_forward:</code></td><td>ℹ️</td><td><code>:information_source:</code></td><td>🆗</td><td><code>:ok:</code></td><td>🔀</td><td><code>:twisted_rightwards_arrows:</code></td></tr><tr class="even"><td>🔁</td><td><code>:repeat:</code></td><td>🔂</td><td><code>:repeat_one:</code></td><td>🆕</td><td><code>:new:</code></td><td>🔝</td><td><code>:top:</code></td></tr><tr class="odd"><td>🆙</td><td><code>:up:</code></td><td>🆒</td><td><code>:cool:</code></td><td>🆓</td><td><code>:free:</code></td><td>🆖</td><td><code>:ng:</code></td></tr><tr class="even"><td>🎦</td><td><code>:cinema:</code></td><td>🈁</td><td><code>:koko:</code></td><td>📶</td><td><code>:signal_strength:</code></td><td>🈹</td><td><code>:u5272:</code></td></tr><tr class="odd"><td>🈴</td><td><code>:u5408:</code></td><td>🈺</td><td><code>:u55b6:</code></td><td>🈯️</td><td><code>:u6307:</code></td><td>🈷️</td><td><code>:u6708:</code></td></tr><tr class="even"><td>🈶</td><td><code>:u6709:</code></td><td>🈵</td><td><code>:u6e80:</code></td><td>🈚️</td><td><code>:u7121:</code></td><td>🈸</td><td><code>:u7533:</code></td></tr><tr class="odd"><td>🈳</td><td><code>:u7a7a:</code></td><td>🈲</td><td><code>:u7981:</code></td><td>🈂️</td><td><code>:sa:</code></td><td>🚻</td><td><code>:restroom:</code></td></tr><tr class="even"><td>🚹</td><td><code>:mens:</code></td><td>🚺</td><td><code>:womens:</code></td><td>🚼</td><td><code>:baby_symbol:</code></td><td>🚭</td><td><code>:no_smoking:</code></td></tr><tr class="odd"><td>🅿️</td><td><code>:parking:</code></td><td>♿️</td><td><code>:wheelchair:</code></td><td>🚇</td><td><code>:metro:</code></td><td>🛄</td><td><code>:baggage_claim:</code></td></tr><tr class="even"><td>🚰</td><td><code>:potable_water:</code></td><td>🚾</td><td><code>:wc:</code></td><td>🚮</td><td><code>:put_litter_in_its_place:</code></td><td>㊙️</td><td><code>:secret:</code></td></tr><tr class="odd"><td>㊗️</td><td><code>:congratulations:</code></td><td>Ⓜ️</td><td><code>:m:</code></td><td>🛂</td><td><code>:passport_control:</code></td><td>🛅</td><td><code>:left_luggage:</code></td></tr><tr class="even"><td>🛃</td><td><code>:customs:</code></td><td>🉐</td><td><code>:ideograph_advantage:</code></td><td>🆑</td><td><code>:cl:</code></td><td>🆘</td><td><code>:sos:</code></td></tr><tr class="odd"><td>🆔</td><td><code>:id:</code></td><td>🚫</td><td><code>:no_entry_sign:</code></td><td>🔞</td><td><code>:underage:</code></td><td>📵</td><td><code>:no_mobile_phones:</code></td></tr><tr class="even"><td>🚯</td><td><code>:do_not_litter:</code></td><td>🚱</td><td><code>:non-potable_water:</code></td><td>🚳</td><td><code>:no_bicycles:</code></td><td>🚷</td><td><code>:no_pedestrians:</code></td></tr><tr class="odd"><td>🚸</td><td><code>:children_crossing:</code></td><td>⛔️</td><td><code>:no_entry:</code></td><td>✳️</td><td><code>:eight_spoked_asterisk:</code></td><td>✴️</td><td><code>:eight_pointed_black_star:</code></td></tr><tr class="even"><td>💟</td><td><code>:heart_decoration:</code></td><td>🆚</td><td><code>:vs:</code></td><td>📳</td><td><code>:vibration_mode:</code></td><td>📴</td><td><code>:mobile_phone_off:</code></td></tr><tr class="odd"><td>💹</td><td><code>:chart:</code></td><td>💱</td><td><code>:currency_exchange:</code></td><td>♈️</td><td><code>:aries:</code></td><td>♉️</td><td><code>:taurus:</code></td></tr><tr class="even"><td>♊️</td><td><code>:gemini:</code></td><td>♋️</td><td><code>:cancer:</code></td><td>♌️</td><td><code>:leo:</code></td><td>♍️</td><td><code>:virgo:</code></td></tr><tr class="odd"><td>♎️</td><td><code>:libra:</code></td><td>♏️</td><td><code>:scorpius:</code></td><td>♐️</td><td><code>:sagittarius:</code></td><td>♑️</td><td><code>:capricorn:</code></td></tr><tr class="even"><td>♒️</td><td><code>:aquarius:</code></td><td>♓️</td><td><code>:pisces:</code></td><td>⛎</td><td><code>:ophiuchus:</code></td><td>🔯</td><td><code>:six_pointed_star:</code></td></tr><tr class="odd"><td>❎</td><td><code>:negative_squared_cross_mark:</code></td><td>🅰️</td><td><code>:a:</code></td><td>🅱️</td><td><code>:b:</code></td><td>🆎</td><td><code>:ab:</code></td></tr><tr class="even"><td>🅾️</td><td><code>:o2:</code></td><td>💠</td><td><code>:diamond_shape_with_a_dot_inside:</code></td><td>♻️</td><td><code>:recycle:</code></td><td>🔚</td><td><code>:end:</code></td></tr><tr class="odd"><td>🔛</td><td><code>:on:</code></td><td>🔜</td><td><code>:soon:</code></td><td>🕐</td><td><code>:clock1:</code></td><td>🕜</td><td><code>:clock130:</code></td></tr><tr class="even"><td>🕙</td><td><code>:clock10:</code></td><td>🕥</td><td><code>:clock1030:</code></td><td>🕚</td><td><code>:clock11:</code></td><td>🕦</td><td><code>:clock1130:</code></td></tr><tr class="odd"><td>🕛</td><td><code>:clock12:</code></td><td>🕧</td><td><code>:clock1230:</code></td><td>🕑</td><td><code>:clock2:</code></td><td>🕝</td><td><code>:clock230:</code></td></tr><tr class="even"><td>🕒</td><td><code>:clock3:</code></td><td>🕞</td><td><code>:clock330:</code></td><td>🕓</td><td><code>:clock4:</code></td><td>🕟</td><td><code>:clock430:</code></td></tr><tr class="odd"><td>🕔</td><td><code>:clock5:</code></td><td>🕠</td><td><code>:clock530:</code></td><td>🕕</td><td><code>:clock6:</code></td><td>🕡</td><td><code>:clock630:</code></td></tr><tr class="even"><td>🕖</td><td><code>:clock7:</code></td><td>🕢</td><td><code>:clock730:</code></td><td>🕗</td><td><code>:clock8:</code></td><td>🕣</td><td><code>:clock830:</code></td></tr><tr class="odd"><td>🕘</td><td><code>:clock9:</code></td><td>🕤</td><td><code>:clock930:</code></td><td>💲</td><td><code>:heavy_dollar_sign:</code></td><td>©️</td><td><code>:copyright:</code></td></tr><tr class="even"><td>®️</td><td><code>:registered:</code></td><td>™️</td><td><code>:tm:</code></td><td>❌</td><td><code>:x:</code></td><td>❗️</td><td><code>:heavy_exclamation_mark:</code></td></tr><tr class="odd"><td>‼️</td><td><code>:bangbang:</code></td><td>⁉️</td><td><code>:interrobang:</code></td><td>⭕️</td><td><code>:o:</code></td><td>✖️</td><td><code>:heavy_multiplication_x:</code></td></tr><tr class="even"><td>➕</td><td><code>:heavy_plus_sign:</code></td><td>➖</td><td><code>:heavy_minus_sign:</code></td><td>➗</td><td><code>:heavy_division_sign:</code></td><td>💮</td><td><code>:white_flower:</code></td></tr><tr class="odd"><td>💯</td><td><code>:100:</code></td><td>✔️</td><td><code>:heavy_check_mark:</code></td><td>☑️</td><td><code>:ballot_box_with_check:</code></td><td>🔘</td><td><code>:radio_button:</code></td></tr><tr class="even"><td>🔗</td><td><code>:link:</code></td><td>➰</td><td><code>:curly_loop:</code></td><td>〰️</td><td><code>:wavy_dash:</code></td><td>〽️</td><td><code>:part_alternation_mark:</code></td></tr><tr class="odd"><td>🔱</td><td><code>:trident:</code></td><td>✅</td><td><code>:white_check_mark:</code></td><td>🔲</td><td><code>:black_square_button:</code></td><td>🔳</td><td><code>:white_square_button:</code></td></tr><tr class="even"><td>⚫️</td><td><code>:black_circle:</code></td><td>⚪️</td><td><code>:white_circle:</code></td><td>🔴</td><td><code>:red_circle:</code></td><td>🔵</td><td><code>:large_blue_circle:</code></td></tr><tr class="odd"><td>🔷</td><td><code>:large_blue_diamond:</code></td><td>🔶</td><td><code>:large_orange_diamond:</code></td><td>🔹</td><td><code>:small_blue_diamond:</code></td><td>🔸</td><td><code>:small_orange_diamond:</code></td></tr><tr class="even"><td>🔺</td><td><code>:small_red_triangle:</code></td><td>🔻</td><td><code>:small_red_triangle_down:</code></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考 &lt;a href=&quot;https://github.com/liuchengxu/git-commit-emoji-cn&quot; title=&quot;git commit emoji 使用指南&quot;&gt;git commit emoji 使用指南&lt;/a&gt;、&lt;a href=&quot;https://github.com/zhouie/markdown-emoji&quot; title=&quot;markdown-emoji&quot;&gt;markdown-emoji&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="emoji" scheme="http://ann-zhgy.github.io/categories/emoji/"/>
    
    
    <category term="markdown emoji" scheme="http://ann-zhgy.github.io/tags/markdown-emoji/"/>
    
    <category term="github emoji" scheme="http://ann-zhgy.github.io/tags/github-emoji/"/>
    
  </entry>
  
  <entry>
    <title>JAVA9 新特性</title>
    <link href="http://ann-zhgy.github.io/2023/02/fb6d7cde.html"/>
    <id>http://ann-zhgy.github.io/2023/02/fb6d7cde.html</id>
    <published>2023-02-13T11:43:29.000Z</published>
    <updated>2023-11-15T06:22:06.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JAVA9 并非一个长期更新版本，但是其中的一些新特性也代表着 Java更新的方向</p></blockquote><span id="more"></span><h1 id="jdk-目录的变化">JDK 目录的变化</h1><p>在 JavaSE 9 之前：</p><ul><li>bin 目录用于包含命令行开发和调试工具，如 javac，jar 和 javadoc。它还用于包含 Java 命令来启动 Java 应用程序。</li><li>include 目录包含在编译本地代码时使用的 C/C++ 头文件。</li><li>lib 目录包含 JDK 工具的几个 JAR 和其他类型的文件。它有一个 tools.jar 文件，其中包含 javac 编译器的 Java 类。</li><li>jre，如 java 命令。在 Windows 平台上，它包含系统的运行时动态链接库（DLL）。</li><li>jre，如.properties 和.policy 文件。</li><li>jre。这允许在 Java 社区进程之外创建的实施标准或独立技术的类和接口的更高版本被并入 Java 平台。这些 JAR 被添加到 JVM 的引导类路径中，从而覆盖了 Java 运行时中存在的这些类和接口的任何定义。</li><li>jre。该机制通过扩展类加载器（该类加载器）加载了该目录中的所有 JAR，该引导类加载器是系统类加载器的子进程，它加载所有应用程序类。通过将 JAR 放在此目录中，可以扩展 Java SE 平台。这些 JAR 的内容对于在此运行时映像上编译或运行的所有应用程序都可见。</li><li>jre。 rt.jar 文件包含运行时的 Java 类和资源文件。许多工具依赖于 rt.jar 文件的位置。</li><li>jre。</li><li>jre，其中包含运行时文件，如字体和图像。</li></ul><p>从 JavaSE 9 开始：</p><ul><li>没有名为 jre 的子目录。</li><li>bin 目录包含所有命令。在 Windows 平台上，它继续包含系统的运行时动态链接库。</li><li>conf 目录包含用户可编辑的配置文件，例如以前位于 jre.properties 和.policy 文件。</li><li>include 目录包含要在以前编译本地代码时使用的 C/C++ 头文件。它只存在于 JDK 中。</li><li>jmods 目录包含 JMOD 格式的平台模块。 创建自定义运行时映像时需要它。它只存在于 JDK 中。</li><li>legal 目录包含法律声明。</li><li>lib 目录包含非 Windows 平台上的动态链接本地库。其子目录和文件不应由开发人员直接编辑或使用。</li></ul><h1 id="接口可以添加私有方法">接口可以添加私有方法</h1><p>继 Java8 可以添加默认方法之后，Java9支持添加私有方法了，给人一种和抽象类越来越像的感觉</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceA</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"default method!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"call private method..."</span>);</span><br><span class="line">        privateMethod();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"private method!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>接口中的私有方法可以提供给 default修饰的方法调用，在子类中是不可调用的</li></ul><h1 id="try-with-resource-语法糖支持将外部变量写在括号内">try-with-resource语法糖支持将外部变量写在括号内</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryWithResource</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(Objects.requireNonNull(TryWithResource.class.getResource(<span class="string">"/file.txt"</span>)).getPath());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line">        <span class="keyword">try</span> (fileReader; bufferedReader) {</span><br><span class="line">            <span class="comment">// 具体操作</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>此写法使得 try-resource 的括号中的内容不再臃肿</li></ul><h1 id="变量命名时禁止使用-_">变量命名时禁止使用 ‘_’</h1><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1677650907021" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1677650907021.png" style="width: 100%;"></p></div><ul><li>在 Java8 中，单独使用 <code>_</code> 作为变量名会有警告信息，Java9中已经是会报错了</li></ul><h1 id="deprecated-注解添加属性"><span class="citation" data-cites="Deprecated">@Deprecated</span> 注解添加属性</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2003, 2015, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A program element annotated {<span class="doctag">@code</span> <span class="doctag">@Deprecated</span>} is one that programmers</span></span><br><span class="line"><span class="comment"> * are discouraged from using. An element may be deprecated for any of several</span></span><br><span class="line"><span class="comment"> * reasons, for example, its usage is likely to lead to errors; it may</span></span><br><span class="line"><span class="comment"> * be changed incompatibly or removed in a future version; it has been</span></span><br><span class="line"><span class="comment"> * superseded by a newer, usually preferable alternative; or it is obsolete.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Compilers issue warnings when a deprecated program element is used or</span></span><br><span class="line"><span class="comment"> * overridden in non-deprecated code. Use of the {<span class="doctag">@code</span> <span class="doctag">@Deprecated</span>}</span></span><br><span class="line"><span class="comment"> * annotation on a local variable declaration or on a parameter declaration</span></span><br><span class="line"><span class="comment"> * or a package declaration has no effect on the warnings issued by a compiler.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;When a module is deprecated, the use of that module in {<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * requires}, but not in {<span class="doctag">@code</span> exports} or {<span class="doctag">@code</span> opens} clauses causes</span></span><br><span class="line"><span class="comment"> * a warning to be issued. A module being deprecated does &lt;em&gt;not&lt;/em&gt; cause</span></span><br><span class="line"><span class="comment"> * warnings to be issued for uses of types within the module.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation type has a string-valued element {<span class="doctag">@code</span> since}. The value</span></span><br><span class="line"><span class="comment"> * of this element indicates the version in which the annotated program element</span></span><br><span class="line"><span class="comment"> * was first deprecated.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation type has a boolean-valued element {<span class="doctag">@code</span> forRemoval}.</span></span><br><span class="line"><span class="comment"> * A value of {<span class="doctag">@code</span> true} indicates intent to remove the annotated program</span></span><br><span class="line"><span class="comment"> * element in a future version. A value of {<span class="doctag">@code</span> false} indicates that use of</span></span><br><span class="line"><span class="comment"> * the annotated program element is discouraged, but at the time the program</span></span><br><span class="line"><span class="comment"> * element was annotated, there was no specific intent to remove it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span></span></span><br><span class="line"><span class="comment"> * It is strongly recommended that the reason for deprecating a program element</span></span><br><span class="line"><span class="comment"> * be explained in the documentation, using the {<span class="doctag">@code</span> <span class="doctag">@deprecated</span>}</span></span><br><span class="line"><span class="comment"> * javadoc tag. The documentation should also suggest and link to a</span></span><br><span class="line"><span class="comment"> * recommended replacement API, if applicable. A replacement API often</span></span><br><span class="line"><span class="comment"> * has subtly different semantics, so such issues should be discussed as</span></span><br><span class="line"><span class="comment"> * well.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;It is recommended that a {<span class="doctag">@code</span> since} value be provided with all newly</span></span><br><span class="line"><span class="comment"> * annotated program elements. Note that {<span class="doctag">@code</span> since} cannot be mandatory,</span></span><br><span class="line"><span class="comment"> * as there are many existing annotations that lack this element value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;There is no defined order among annotation elements. As a matter of</span></span><br><span class="line"><span class="comment"> * style, the {<span class="doctag">@code</span> since} element should be placed first.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The {<span class="doctag">@code</span> <span class="doctag">@Deprecated</span>} annotation should always be present if</span></span><br><span class="line"><span class="comment"> * the {<span class="doctag">@code</span> <span class="doctag">@deprecated</span>} javadoc tag is present, and vice-versa.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.4.6 <span class="doctag">@Deprecated</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE})</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the version in which the annotated element became deprecated.</span></span><br><span class="line"><span class="comment">     * The version string is in the same format and namespace as the value of</span></span><br><span class="line"><span class="comment">     * the {<span class="doctag">@code</span> <span class="doctag">@since</span>} javadoc tag. The default value is the empty</span></span><br><span class="line"><span class="comment">     * string.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the version string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">since</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates whether the annotated element is subject to removal in a</span></span><br><span class="line"><span class="comment">     * future version. The default value is {<span class="doctag">@code</span> false}.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> whether the element is subject to removal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">forRemoval</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>since</code> 属性表示从哪个版本开始弃用</li><li><code>forRemoval</code> 表示未来是否会删除</li></ul><h1 id="string类底层优化">String 类底层优化</h1><ol type="1"><li>底层使用 <code>byte[]</code> 代替 <code>char[]</code>存储，当字符串是全英文的时候，可以节省空间</li><li>新增了 <code>COMPACT_STRINGS</code> 和 <code>coder</code>两个成员变量<ol type="1"><li><code>COMPACT_STRINGS</code>：是否压缩。true - 压缩；false - 不压缩，使用UTF16 编码格式</li><li><code>coder</code>：当前使用的编码。LATIN1 (0)- 拉丁，UTF16 (1)</li></ol></li></ol><h1 id="jmod-模块化">Jmod 模块化</h1><p>当我们开发 web 应用时， <code>Java</code>自带有很多无用的包也必须加载，如：awt、application…… 但是实际上我们用不到这些包。Java9模块化的特性将这些基础的包分成了各个模块，开发者可以通过module-info.java这个文件限制当前模块哪些类是可以开放给外界使用的，哪些类是我需要的</p><blockquote><p>对比 <a href="https://docs.oracle.com/javase/8/docs/api/index.html">Java8</a> 和<a href="https://docs.oracle.com/javase/9/docs/api/overview-summary.html">Java9</a>的官方文档，我们可以发现 Java9 的官方文档首页显示的是 module，而 Java8的是 package</p></blockquote><p>module-info.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> java9Demo {</span><br><span class="line">    <span class="keyword">requires</span> xxx;</span><br><span class="line">    <span class="keyword">exports</span> xxx; <span class="comment">// 导出包，表示允许访问指标包中的 public 成员</span></span><br><span class="line">    opens xxx2; <span class="comment">// 导出包，表示允许在运行时通过反射的形式访问</span></span><br><span class="line">    uses xxxInterface;</span><br><span class="line">    provides xxxInterface with xxxImplClass; <span class="comment">// 语句指定一个或多个服务接口的实现类</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>requires</code> 表示需要本模块依赖哪些接口</li><li>使用 <code>exports</code>表示本模块要开放哪些接口，即依赖方可以访问哪些包下面的 public资源，但是不可以通过反射访问，运行时会报错</li><li>使用 <code>opens</code>表示本模块哪些成员可以在，即依赖方可以在运行时通过反射的方式访问哪些资源，但是不可以直接访问，编译时会报错</li><li>使用 <code>uses</code>表示本模块的接口是需要依赖引用的模块实现的，使用服务接口的名字，当前模块就会发现它，使用<code>java.util.ServiceLoader</code>类进行加载，必须是本模块中的，不能是其他模块中的。其实现类可以由其他模块提供.</li><li> 使用 <code>provides xxxInterface with xxxImplClass</code>表示本模块的接口使用的哪个实现</li></ul><h1 id="jshell-工具">JShell 工具</h1><blockquote><p>类似于 node、ruby 等包含直接运行简单脚本的交互环境，Java9也添加了类似的环境，同时也可以类比一下浏览器的开发者工具的控制台，可以直接运行简单的js 脚本</p></blockquote><ul><li><p>通过 jshell 命令进入终端，然后写简单的语句即可实时获取结果</p><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="1678179847508" data-src="https://blog-pic-bed.oss-cn-beijing.aliyuncs.com/blog-pic1678179847508.png" style="width: 100%;"></p></div></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;JAVA9 并非一个长期更新版本，但是其中的一些新特性也代表着 Java
更新的方向&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java新特性" scheme="http://ann-zhgy.github.io/categories/Java%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="Java9新特性" scheme="http://ann-zhgy.github.io/tags/Java9%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>专题 —— 数据结构与算法 - 06 番外 - 表达式求值</title>
    <link href="http://ann-zhgy.github.io/2022/03/ef31f377.html"/>
    <id>http://ann-zhgy.github.io/2022/03/ef31f377.html</id>
    <published>2022-03-23T09:38:59.000Z</published>
    <updated>2023-11-15T06:22:06.589Z</updated>
    
    <content type="html"><![CDATA[<p><code>OperatorEnum</code>: 简单加减乘除的枚举类</p><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperatorEnum</span> {</span><br><span class="line">    ADD(<span class="string">"+"</span>, <span class="number">1</span>) {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Number <span class="title function_">eval</span><span class="params">(<span class="meta">@NonNull</span> Number number1, <span class="meta">@NonNull</span> Number number2)</span> {</span><br><span class="line">            <span class="keyword">return</span> number1.doubleValue() + number2.doubleValue();</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    SUBTRACT(<span class="string">"-"</span>, <span class="number">1</span>) {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Number <span class="title function_">eval</span><span class="params">(<span class="meta">@NonNull</span> Number number1, <span class="meta">@NonNull</span> Number number2)</span> {</span><br><span class="line">            <span class="keyword">return</span> number1.doubleValue() - number2.doubleValue();</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    MULTIPLY(<span class="string">"*"</span>, <span class="number">2</span>) {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Number <span class="title function_">eval</span><span class="params">(<span class="meta">@NonNull</span> Number number1, <span class="meta">@NonNull</span> Number number2)</span> {</span><br><span class="line">            <span class="keyword">return</span> number1.doubleValue() * number2.doubleValue();</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>, <span class="number">2</span>) {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Number <span class="title function_">eval</span><span class="params">(<span class="meta">@NonNull</span> Number number1, <span class="meta">@NonNull</span> Number number2)</span> {</span><br><span class="line">            <span class="keyword">return</span> number1.doubleValue() / number2.doubleValue();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作符 + - * /</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String operationalCharacter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作符 优先级权重，越大优先级越高：乘除比加减的优先级高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer priorityWeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Number <span class="title function_">eval</span><span class="params">(<span class="meta">@NonNull</span> Number number1, <span class="meta">@NonNull</span> Number number2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OperatorEnum <span class="title function_">valueOfOperationalCharacter</span><span class="params">(String operationalCharacter)</span> {</span><br><span class="line">        <span class="keyword">for</span> (OperatorEnum value : values()) {</span><br><span class="line">            <span class="keyword">if</span> (value.operationalCharacter.equals(operationalCharacter)) {</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="表达式的前缀中缀后缀">表达式的前缀、中缀、后缀</h1><h2 id="中缀表达式中缀记法">中缀表达式（中缀记法）</h2><blockquote><p>a + (b + c) / d</p></blockquote><p>中缀表达式是一种通用的算数或逻辑公式的表示方法，操作符处于操作数之间，是最直观、人脑最容易理解的表达式，但是计算机并不容易理解</p><h2 id="前缀表达式前缀记法波兰式">前缀表达式（前缀记法、波兰式）</h2><blockquote><p>+ / + b c d a</p></blockquote><p>前缀表达式的操作符位于操作数之前</p><h3 id="计算机求值方式">计算机求值方式</h3><p>从右至左扫描表达式，遇到数字的时候，直接压入栈中，遇到运算符时，弹出两个操作数，计算结果并将结果压入栈中，重复此过程直到表达式最左端</p><p>例如 “<span class="math inline">\((3 + 4) \times 5 - 6\)</span>”-&gt;“- × + 3 4 5 6”：</p><ol type="1"><li>从右至左扫描，将 6、5、4、3 压入堆栈</li><li>遇到 <span class="math inline">\(+\)</span>运算符，因此弹出 3 和 4，计算出 <span class="math inline">\(3+4\)</span>的值，得 7，再将 7 入栈</li><li>接下来是 <span class="math inline">\(\times\)</span>运算符，因此弹出 7 和 5，计算出 <span class="math inline">\(7\times5=35\)</span> ，将 35 入栈</li><li>最后是 <span class="math inline">\(-\)</span> 运算符，计算出 <span class="math inline">\(35-6\)</span> 的值，即 29，由此得出最终结果 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Number <span class="title function_">eval</span><span class="params">(String expression)</span> {</span><br><span class="line">    Stack&lt;Number&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; operators = Arrays.stream(OperatorEnum.values())</span><br><span class="line">        .map(OperatorEnum::getOperationalCharacter)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    String[] split = expression.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> split.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">operator</span> <span class="operator">=</span> split[i];</span><br><span class="line">        <span class="keyword">if</span> (!operators.contains(operator)) {</span><br><span class="line">            stack.push(Double.parseDouble(String.valueOf(operator)));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">OperatorEnum</span> <span class="variable">operatorEnum</span> <span class="operator">=</span> OperatorEnum.valueOfOperationalCharacter(operator);</span><br><span class="line">        <span class="keyword">assert</span> operatorEnum != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">result</span> <span class="operator">=</span> operatorEnum.eval(stack.pop(), stack.pop());</span><br><span class="line">        stack.push(result);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">Number</span> <span class="variable">result</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">    <span class="keyword">if</span> (!stack.isEmpty()) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"表达式错误"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="后缀表达式后缀记法逆波兰式">后缀表达式（后缀记法，逆波兰式）</h2><blockquote><p>b c + d / a +</p></blockquote><p>后缀表达式的操作符位于操作数之后</p><h3 id="计算机求值方式-1">计算机求值方式</h3><p>与前缀表达式类似，只是顺序是从左至右：从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素op栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果。例如 “<span class="math inline">\((3 + 4) \times 5 - 6\)</span>” -&gt;“34 + 5 × 6 -”：</p><ol type="1"><li>从左至右扫描，将 3 和 4 压入堆栈</li><li>遇到 <span class="math inline">\(+\)</span>运算符，因此弹出 4 和 3，计算出 <span class="math inline">\(3+4\)</span>的值，得 7，再将 7 入栈</li><li>将 5 入栈</li><li>接下来是 <span class="math inline">\(\times\)</span>运算符，因此弹出 5 和 7，计算出 <span class="math inline">\(7\times5=35\)</span> ，将 35 入栈</li><li>将 6 入栈</li><li>最后是 <span class="math inline">\(-\)</span> 运算符，计算出 <span class="math inline">\(35-6\)</span> 的值，即 29，由此得出最终结 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Number <span class="title function_">eval</span><span class="params">(String expression)</span> {</span><br><span class="line">    String[] split = expression.split(<span class="string">" "</span>);</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> split.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">operator</span> <span class="operator">=</span> split[i];</span><br><span class="line">        stack.push(operator);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (stack.size() &gt; <span class="number">1</span>) {</span><br><span class="line">        <span class="type">Double</span> <span class="variable">number1</span> <span class="operator">=</span> Double.parseDouble(stack.pop());</span><br><span class="line">        <span class="type">Double</span> <span class="variable">number2</span> <span class="operator">=</span> Double.parseDouble(stack.pop());</span><br><span class="line">        <span class="type">String</span> <span class="variable">operatorChar</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="type">OperatorEnum</span> <span class="variable">operatorEnum</span> <span class="operator">=</span> OperatorEnum.valueOfOperationalCharacter(operatorChar);</span><br><span class="line">        <span class="keyword">assert</span> operatorEnum != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">result</span> <span class="operator">=</span> operatorEnum.eval(number1, number2);</span><br><span class="line">        stack.push(String.valueOf(result));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> Double.parseDouble(stack.pop());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="中缀表达式转换为前后缀表达式">中缀表达式转换为 [前 / 后] 缀表达式</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;OperatorEnum&lt;/code&gt;: 简单加减乘除的枚举类&lt;/p&gt;</summary>
    
    
    
    
    <category term="栈应用" scheme="http://ann-zhgy.github.io/tags/%E6%A0%88%E5%BA%94%E7%94%A8/"/>
    
    <category term="表达式求值" scheme="http://ann-zhgy.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>专题 —— 数据结构与算法 - 05 线性表 - 栈、队列</title>
    <link href="http://ann-zhgy.github.io/2021/11/1f63d870.html"/>
    <id>http://ann-zhgy.github.io/2021/11/1f63d870.html</id>
    <published>2021-11-09T12:00:36.000Z</published>
    <updated>2023-11-15T06:22:06.589Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>栈和队列都是一种运算受限的线性表，因为其运算受限，所以才有一些优秀的特性</p></blockquote><h1 id="栈">栈</h1><blockquote><p>栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。<code>&lt;right-bq&gt;</code>—— 来自<a href="https://baike.baidu.com/item/%E6%A0%88/12808149">百度百科</a><code>&lt;/right-bq&gt;</code></p></blockquote><span id="more"></span><h2 id="栈是什么">栈是什么</h2><p>栈是一种后进先出的线性结构，一个比较贴切的例子就是一摞叠在一起的盘子，我们总是会将盘子叠在原有的上面，取的时候也总是从最上面的开始取。<strong>后进者先出，先进者后出</strong>就是栈结构</p><h2 id="相关概念">相关概念</h2><ul><li>顺序栈：使用数组实现的栈</li><li>链式栈：使用链表实现的栈</li><li>栈顶：允许数据插入和删除的一端</li><li>栈底：栈顶的另一端</li><li>入栈 / 压栈 (push)：将数据插入栈</li><li>出栈 / 弹栈 (pop)：删除栈顶的数据</li></ul><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20220323162300" data-src="https://s2.loli.net/2022/03/23/EqO72l4RCiYWQmM.png" style="width: 100%;"></p></div><h2 id="复杂度">复杂度</h2><p>以顺序栈为例：在实现栈时，我们需要存储栈顶和栈底，所以弹栈和压栈都是<span class="math inline">\(O(1)\)</span>的时间复杂度，但是当栈满了之后继续压栈就需要扩容，若栈的容量为 <span class="math inline">\(k\)</span>，那么在进行了 <span class="math inline">\(k\)</span> 次压栈之后就需要一个 <span class="math inline">\(O(k)\)</span>的扩容，均摊下来之后，时间复杂度依旧为 <span class="math inline">\(O(1)\)</span></p><h2 id="栈的应用">栈的应用</h2><ol type="1"><li>浏览器的前进后退功能</li><li><code>JVM</code> 中的<strong>栈</strong>：程序运行总伴随着方法的调用，方法执行前会先保留现场，然后将参数、临时变量等信息封装为一个栈帧压入栈中，执行完毕之后将此栈帧从栈中弹出，所以递归调用时如果不设置方法出口 (`<code>return</code>) 就会发生栈溢出<code>StackOverflowError</code></li><li>表达式求值：可看后文</li><li>括号匹配</li></ol><h1 id="队列">队列</h1><blockquote><p><strong>队列</strong>，又称为<strong>伫列</strong>（queue），<a href="https://zh.wikipedia.org/wiki/計算機科學">计算机科学</a>中的一种<a href="https://zh.wikipedia.org/wiki/抽象資料型別">抽象资料型别</a>，是<a href="https://zh.wikipedia.org/wiki/先進先出演算法">先进先出</a>（FIFO,First-In-First-Out）的<a href="https://zh.wikipedia.org/wiki/线性表">线性表</a>。在具体应用中通常用<a href="https://zh.wikipedia.org/wiki/链表">链表</a>或者<a href="https://zh.wikipedia.org/wiki/数组">数组</a>来实现。队列只允许在后端（称为 <em>rear</em>）进行插入操作，在前端（称为 <em>front</em>）进行删除操作。<code>&lt;right-bq&gt;</code>—— 来自<a href="https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97">维基百科</a><code>&lt;/right-bq&gt;</code></p></blockquote><h2 id="队列是什么">队列是什么</h2><p>队列是一种先进先出的结构，比较贴切的例子就是排队买票，先来的先买，后来的排到队尾，不可以插队。<strong>先进者先出</strong>就是队列</p><h2 id="相关概念-1">相关概念</h2><ul><li>顺序队列：使用数组实现的队列</li><li>链式队列：使用链表实现的队列</li><li>循环队列：队首队尾相连的队列</li><li>阻塞队列：当队列为空时，不允许出队操作，当队列满时，不允许入队操作</li><li>并发队列：可以保证并发时线程安全的队列</li><li>队首 (front)：可以进行出队的一端</li><li>队尾 (rear)：可以进行入队的一端</li><li>入队 (enqueue)：将数据插入到队列中</li><li>出队 (dequeue)：从队列中取出数据</li></ul><div style="max-width: 75%; margin: auto; opacity: 0.95;"><p><img alt="20220323173707" data-src="https://s2.loli.net/2022/03/23/WyksNeIJhMKi8bO.png" style="width: 100%;"></p></div>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;栈和队列都是一种运算受限的线性表，因为其运算受限，所以才有一些优秀的特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;栈&quot;&gt;栈&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。&lt;code&gt;&amp;lt;right-bq&amp;gt;&lt;/code&gt;—— 来自&lt;a href=&quot;https://baike.baidu.com/item/%E6%A0%88/12808149&quot;&gt;百度百科&lt;/a&gt;&lt;code&gt;&amp;lt;/right-bq&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="数据结构与算法" scheme="http://ann-zhgy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈" scheme="http://ann-zhgy.github.io/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="http://ann-zhgy.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法 - 线性表 - 链表注意事项</title>
    <link href="http://ann-zhgy.github.io/2021/11/3439f55d.html"/>
    <id>http://ann-zhgy.github.io/2021/11/3439f55d.html</id>
    <published>2021-11-04T08:12:10.000Z</published>
    <updated>2023-11-15T06:22:06.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要概念指针">重要概念 —— 指针</h1><blockquote><p>指针在不同的语言中叫法不同，比如在 C 语言中叫做指针，但是在 Java中叫做引用，虽然名字不同，但是实际上是同一种东西</p></blockquote><span id="more"></span><h2 id="指针是什么">指针是什么？</h2><p>指针是存储地址的变量，通过指针可以访问到该地址的数据。需要注意的是，指针变量只用来存储地址值，其并不关心该地址值是否可用，地址是否有效，寻址时才会关心这些</p><p>举个🌰：</p><p>今天天气不错，所以你在商场吃多了 (别问为啥，我也不知道)，吃多了之后你就想去厕所释放一下，但是你不知道厕所在哪，所以你问服务员，然后服务员给了你一个纸条，上面写着厕所的地址，这个纸条就可以理解成指针，因为它存储了厕所的地址</p><h2 id="c语言和其他语言的指针">C 语言和其他语言的指针</h2><p>C 语言的指针几乎可以访问任意数据，而指针所在的内存也是通过函数申请来的，所以在使用完之后需要手动释放内存空间。对于Java、Go 等有垃圾回收器的语言来说，就不需要手动释放内存了。</p><h1 id="哨兵">哨兵</h1><blockquote><p>哨兵：守卫边疆的英雄！</p></blockquote><p>哨兵节点就是边界节点 —— 头节点或尾节点（一般是头节点），这个节点不存储元素，目的是用来简化链表的实现难度，减少边界值的处理</p><h2 id="向空链表插入节点">向空链表插入节点</h2><p>向指定节点 p 后面插入节点时，只需要如下两行代码即可</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newNode.next = p.next;</span><br><span class="line">p.next = newNode;</span><br></pre></td></tr></tbody></table></figure><p>但是向空链表插入节点时，因为没有头节点，所以需要将插入节点变为头节点</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == null) {</span><br><span class="line">    head = newNode;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="删除链表的最后一个节点">删除链表的最后一个节点</h2><blockquote><p>节点前面的节点叫做前驱节点，后面的叫做后继节点</p></blockquote><p>如果我们要删除某节点的后继节点，用下面一行代码即可搞定：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.next = p.next.next;</span><br></pre></td></tr></tbody></table></figure><p>但是如果该节点是链表的最后一个节点，就不能这么删除了，需要进行判断</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head.next == null) {</span><br><span class="line">    head = null;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="添加哨兵后">添加哨兵后</h2><blockquote><p>哨兵节点并不会存储任何数据，它就是单纯作为头节点存在的</p><p>有哨兵节点的链表叫做带头链表，反之则称为不带头链表</p></blockquote><p>向空链表插入节点时，<code>p</code> 就是 <code>head</code>节点，删除链表的最后一个节点时，<code>p</code> 还是 <code>head</code>节点，使用原有的逻辑即可</p><h1 id="一些注意点">一些注意点</h1><h2 id="善于画图">善于画图</h2><p>画图可以清晰地表达出逻辑关系，便于理解，同时，代码写完后画图走一遍也更容易找出bug</p><h2 id="注意边界条件">注意边界条件</h2><p>在软件开发中，代码在边界情况下极容易产生bug。比如链表，在实现的时候就需要考虑在边界条件下代码是否正常：</p><ul><li>链表为空时</li><li>只包含一个节点或只包含两个节点时</li><li>对于头尾节点的操作</li></ul><h2 id="多练习">多练习</h2><p>熟能生巧，通过大量的练习，我们可以找到很多写代码的感觉，积累很多经验</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;重要概念指针&quot;&gt;重要概念 —— 指针&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;指针在不同的语言中叫法不同，比如在 C 语言中叫做指针，但是在 Java
中叫做引用，虽然名字不同，但是实际上是同一种东西&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="数据结构与算法" scheme="http://ann-zhgy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="http://ann-zhgy.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="指针" scheme="http://ann-zhgy.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="哨兵" scheme="http://ann-zhgy.github.io/tags/%E5%93%A8%E5%85%B5/"/>
    
  </entry>
  
</feed>
